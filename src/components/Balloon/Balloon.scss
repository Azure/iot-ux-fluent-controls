@import '../../common/constants';
@import '../../common/mixins';
@import '../../common/color.controls';

$balloon-arrow-size: 2*$grid-size;
$balloon-width: 65*$grid-size;
$box-shadow-offset-y: $grid-size*2;
$box-shadow-blur: $grid-size*2.5;

@mixin arrow($location, $offset: 'center') {
    &:before {
        content:'';
        display:block;
        width: $balloon-arrow-size;
        height: $balloon-arrow-size;
        background-color: inherit;
        position: absolute;
        transform: rotateZ(45deg);
        
        @if $location == 'top' {
            top: -1*$grid-size;
            border-left: inherit;
            border-top: inherit;
            @if $offset == 'start' {
                left: 3*$grid-size;
            } @else if $offset == 'end' {
                right: 3*$grid-size;
            } @else {
                left: 50%;
                transform: translateX(-50%) rotateZ(45deg);
            }
        } @else if $location == 'left' {
            left: -1*$grid-size;            
            border-left: inherit;
            border-bottom: inherit;
            @if $offset == 'start' {
                top: 3*$grid-size;
            } @else if $offset == 'end' {
                bottom: 3*$grid-size;
            } @else {
                top: 50%;
                transform: translateY(-50%) rotateZ(45deg);
            }
        } @else if $location == 'right' {
            right: -1*$grid-size;
            border-right: inherit;
            border-top: inherit;
            @if $offset == 'start' {
                top: 3*$grid-size;
            } @else if $offset == 'end' {
                bottom: 3*$grid-size;
            } @else {
                top: 50%;
                transform: translateY(-50%) rotateZ(45deg);
            }
        } @else {
            bottom: -1*$grid-size;
            border-right: inherit;
            border-bottom: inherit;            
            @if $offset == 'start' {
                left: 3*$grid-size;
            } @else if $offset == 'end' {
                right: 3*$grid-size;
            } @else {
                left: 50%;
                transform: translateX(-50%) rotateZ(45deg);
            }
        }
    }
}

@mixin position($location, $offset: 'center') {
    @if $location == 'top' {
        top: -1*$grid-size;
        @if $offset == 'start' {
            left: 0px;
            transform: translate(-2*$grid-size, -100%);
        } @else if $offset == 'end' {
            right: 0px;
            transform: translate(2*$grid-size, -100%);
        } @else {
            left: 50%;
            transform: translate(-50%, -100%);
        }
    } @else if $location == 'left' {
        left: -1*$grid-size;
        @if $offset == 'start' {
            top: -1.5*$grid-size;
            transform: translate(-100%, -2*$grid-size);
        } @else if $offset == 'end' {
            bottom: -1.5*$grid-size;
            transform: translate(-100%, 2*$grid-size);
        } @else {
            top: 50%;
            transform: translate(-100%, -50%);
        }
    } @else if $location == 'right' {
        right: -1*$grid-size;
        @if $offset == 'start' {
            top: -1.5*$grid-size;
            transform: translate(100%, -2*$grid-size);
        } @else if $offset == 'end' {
            bottom: -1.5*$grid-size;
            transform: translate(100%, 2*$grid-size);
        } @else {
            top: 50%;
            transform: translate(100%, -50%);
        }
    } @else {
        bottom: -1*$grid-size;
        @if $offset == 'start' {
            left: 0px;
            transform: translate(-2*$grid-size, 100%);
        } @else if $offset == 'end' {
            right: 0px;
            transform: translate(2*$grid-size, 100%);
        } @else {
            left: 50%;
            transform: translate(-50%, 100%);
        }
    }
}

.balloon-dropdown {
    @include md-box(inline-block, absolute);
    font-family: $font-family-default;
    @include themify{
        box-shadow: 0px $box-shadow-offset-y $box-shadow-blur 0px $color-black-transparent-tenth;
        color: themed('color-text-rest');
        background-color: themed('color-bg-balloon');
        border: 1px solid themed('color-border-controls');
    }
    width: $balloon-width;

    .balloon-inner-container {
        @include md-box(inline-block, relative);
        padding: 3*$grid-size 4*$grid-size 4*$grid-size 4*$grid-size;
        color: inherit;
        background-color: inherit;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;

        &.multiline {
            white-space: normal;
        }
    }
    
    header + section {
        margin-top: 4*$grid-size;
    }
    
    section + section {
        margin-top: 4*$grid-size;
    }

    section + footer {
        margin-top: 4*$grid-size;
    }

    &.top-start {
        @include arrow('bottom', 'start');
        
        .balloon-container & {
            @include position('top', 'start');
        }
    }

    &.top-center {
        @include arrow('bottom', 'center');
        
        .balloon-container & {
            @include position('top', 'center');
        }
    }
    
    &.top-end {
        @include arrow('bottom', 'end');
        
        .balloon-container & {
            @include position('top', 'end');
        }
    }

    &.bottom-start {
        @include arrow('top', 'start');
        
        .balloon-container & {
            @include position('bottom', 'start');
        }
    }

    &.bottom-center {
        @include arrow('top', 'center');
        
        .balloon-container & {
            @include position('bottom', 'center');
        }
    }
    
    &.bottom-end {
        @include arrow('top', 'end');
        
        .balloon-container & {
            @include position('bottom', 'end');
        }
    }

    &.left-start {
        @include arrow('right', 'start');
        
        .balloon-container & {
            @include position('left', 'start');
        }
    }

    &.left-center {
        @include arrow('right', 'center');
        
        .balloon-container & {
            @include position('left', 'center');
        }
    }
    
    &.left-end {
        @include arrow('right', 'end');
        
        .balloon-container & {
            @include position('left', 'end');
        }
    }

    &.right-start {
        @include arrow('left', 'start');
        
        .balloon-container & {
            @include position('right', 'start');
        }
    }

    &.right-center {
        @include arrow('left', 'center');
        
        .balloon-container & {
            @include position('right', 'center');
        }
    }
    
    &.right-end {
        @include arrow('left', 'end');
        
        .balloon-container & {
            @include position('right', 'end');
        }
    }
}