@import '../../common/constants';
@import '../../common/mixins';

.combo-input-container {
    @include md-box(flex, relative);

    .input-container {
        @include md-box(block, relative);
        flex-grow: 1;
    }

    .input {
        @include md-box(block, relative);
        width: 100%;
        height: $input-height;
        outline: none;
        border: 1px solid var(--color-foreground-secondary);
        background-color: var(--color-content-background-primary);
        border-radius: $component-border-radius;
        padding: $gutter-xxsmall $gutter-big $gutter-xxsmall $gutter-xxsmall;

        @include rtl {
            padding: $gutter-xxsmall $gutter-xsmall $gutter-xxsmall $gutter-big;
        }

        &:hover, &:focus, &:active {
            // inputs look really weird with a dashed outline, so standardize
            // on the solid selected border for all the above states:
            border: 1px solid var(--color-accent-hover);
        }

        &:focus, &:active, &.visible {
            &:not(.disabled) {
                padding-right: 2*$gutter-big;

                @include rtl {
                    padding-right: $gutter-xxsmall;
                    padding-left: 2*$gutter-big;
                }
            }

            &.show-cancel:not(.disabled) {
                + .cancel {
                    display: inline-block;
                    pointer-events: auto;
                }
            }
        }

        &:disabled {
            color: var(--color-foreground-disabled);
            border: 1px solid var(--color-foreground-disabled);
            background-color: var(--color-state-disabled);

            &::placeholder {
                color: var(--color-foreground-disabled);
            }
        }

        &::placeholder {
            color: var(--color-foreground-inactive);
        }

        &.error:not(:disabled) {
            border: 1px solid var(--color-status-danger);
        }

        &::-ms-clear {
            display: none;
        }

        &:invalid {
            box-shadow: none;
        }
    }

    .cancel {
        @include md-box(display-none, absolute);
        color: var(--color-foreground-inactive);
        padding: $grid-size;
        top: 0;
        height: $input-height;
        border: none;
        background-color: transparent;
        outline: none;
        pointer-events: none;
        cursor: pointer;
        right: $gutter-big;

        @include rtl {
            right: unset;
            left: $gutter-big;
        }

        &:active, &:focus, &:hover {
            color: var(--color-foreground-default);
            pointer-events: auto;
        }
    }

    .chevron {
        @include md-box(absolute, block);
        top: 0;
        pointer-events: none;
        right: $gutter-xxsmall;
        line-height: $input-height;

        @include rtl {
            right: unset;
            left: $gutter-xxsmall;
        }

        &.disabled {
            color: var(--color-foreground-disabled);
        }
    }

    .dropdown:not(.above) {
        @include md-box(inline-block, absolute);
        left: 0px;
        top: 100%;
    }

    .dropdown.above {
        @include md-box(inline-block, absolute);
        left: 0px;
        top: -2*$grid-size;
        transform: translateY(-100%);
    }
}

.dropdown {
    @include md-box(inline-block, relative);
    width: 100%;
    max-height: $dropdown-max-height;
    overflow-y: auto;
    background-color: var(--color-content-background-primary);
    border: 1px solid var(--color-accent-hover);
}

.dropdown > div {
    @include md-box(inline-block, relative);
    width: 100%;
    padding: $grid-size 0px;
}

.option {
    @include md-box(block);
    width: 100%;
    min-height: $option-height;
    padding: 0px $gutter-xsmall;

    border: none;
    box-shadow: none;
    outline: none;
    border-radius: 0px;
    text-align: left;
    background-color: transparent;

    &:not(.disabled) {
        cursor: pointer;
    }

    &.selected {
        background-color: var(--color-state-selected);
    }

    &.hover:not(.disabled), &:focus:not(.disabled) {
        &:not(.selected) {
            background-color: var(--color-state-hover);
        }

        &.selected {
            background-color: var(--color-state-selected-hover);
        }
    }

    &.disabled {
        color: var(--color-foreground-disabled);
    }
}