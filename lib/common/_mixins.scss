@import "~@azure-iot/ux-fluent-css/src/mixins";
@import 'colormap'; // remove it

// remove it
/// Behaves like map-get except with a default value when $key doesn't
/// exist in $map
/// 
/// @param $map map possibly containing $key
/// @param $key key to look up in $map
/// @param $default default value to return when $key doesn't exist in $map
/// @returns value in $map at $key or $default if not found
@function map-get-default($map, $key, $default) {
    @if map-has-key($map, $key) {
        @return map-get($map, $key);
    } @else {
        @return $default;
    }
}

/// Set the default font 
///
@mixin md-default-font {
    font-family: $font-family-default;
    font-size: $font-size-default;
    line-height: 20px;
}

/// Reset button styles
/// 
/// Touches border, outline, background, box-shadow, text-decoration,
/// and cursor CSS properties
@mixin md-button-reset {
    @include md-box();
    border: none;
    outline: none;
    background: none;
    box-shadow: none;
    text-decoration: none;
    &:focus {
        border: none;
        outline: none;
    }
    &:not(:disabled) {
        cursor: pointer;
    }
}


// remove it 
// Set the color based on the color map
@function md-color($color-keys...) {
    $result: $color-map;
    @each $key in $color-keys {
        $result: map-get($result, $key);
    }
    @return $result;
}


/// Styles for a circle element
/// 
/// Touches width, height, and border-radius CSS properties
/// 
/// @param $width circle diameter
@mixin circle($width) {
    width: $width;
    height: $width;
    border-radius: $width/2;
}

/// Pattern matching mixin for position style (used internally by md-box)
/// 
/// Touches position CSS property
/// 
/// @param $option One of: 'absolute', 'relative', 'fixed'
@mixin md-box-position($option) {
    @if $option == 'absolute' {
        position: absolute;
    } @else if $option == 'relative' {
        position: relative;
    } @else if $option == 'fixed' {
        position: fixed;
    }
}

/// Pattern matching mixin for display style (used internally by md-box)
/// 
/// Touches display CSS property
/// 
/// @param $option One of: 'inline', 'block', 'inline-block', 'table-cell',
///     'flex', 'flex-column', 'flex-row', or 'display-none'
@mixin md-box-display($option) {
    @if $option == 'inline' {
        display: inline;
    } @else if $option == 'block' {
        display: block;
    } @else if $option == 'inline-block' {
        display: inline-block;
    } @else if $option == 'table-cell' {
        display: table-cell;
    } @else if $option == 'flex' {
        display: flex;
    } @else if $option == 'flex-column' {
        display: flex;
        flex-direction: column;
    } @else if $option == 'flex-row' {
        display: flex;
        flex-direction: row;
    } @else if $option == 'display-none' {
        display: none;
    }
}

/// Pattern matching mixin for overflow style (used internally by md-box)
/// 
/// Touches overflow, white-space, and text-overflow CSS properties
/// 
/// @param $option One of: 'hidden', 'scroll', 'visible', 'auto', 'x-hidden',
/// 'x-scroll', 'x-visible', 'x-auto', 'y-hidden', 'y-scroll', 'y-visible',
/// 'y-auto', 'ellipsis', or 'y-ellipsis'
@mixin md-box-overflow($option) {
    @if $option == 'hidden' {
        overflow: hidden;
    } @else if $option == 'scroll' {
        overflow: scroll;
    } @else if $option == 'visible' {
        overflow: visible;
    } @else if $option == 'auto' {
        overflow: auto;
    } @else if $option == 'x-hidden' {
        overflow-x: hidden;
    } @else if $option == 'x-scroll' {
        overflow-x: scroll;
    } @else if $option == 'x-visible' {
        overflow-x: visible;
    } @else if $option == 'x-auto' {
        overflow-x: auto;
    } @else if $option == 'y-hidden' {
        overflow-y: hidden;
    } @else if $option == 'y-scroll' {
        overflow-y: scroll;
    } @else if $option == 'y-visible' {
        overflow-y: visible;
    } @else if $option == 'y-auto' {
        overflow-y: auto;
    } @else if $option == 'ellipsis' {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    } @else if $option == 'y-ellipsis' {
        overflow-y: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
}

/// Pattern matching mixin for float style (used internally by md-box)
/// 
/// Touches float and clear CSS properties
/// 
/// @param $option One of: 'float-left', 'float-right', 'float-none',
/// 'clear-left', 'clear-right', or 'clear-both'
@mixin md-box-float($option) {
    @if $option == 'float-left' {
        float: left;
    } @else if $option == 'float-right' {
        float: right;
    } @else if $option == 'float-none' {
        float: none;
    } @else if $option == 'clear-left' {
        clear: left;
    } @else if $option == 'clear-right' {
        clear: right;
    } @else if $option == 'clear-both' {
        clear: both;
    }
}

/// Pattern matching mixin for size style (used internally by md-box)
/// 
/// Touches width and height CSS properties
/// 
/// @param $option Only option: 'fill-parent'
@mixin md-box-size($option) {
    @if $option == 'fill-parent' {
        width: 100%;
        height: 100%;
    }
}

/// Base styling mixin to remove boilerplate
///
/// See above patern matching mixins for options
/// 
/// @param $options... List of string options found in above md-box-* mixins
@mixin md-box($options...) {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
    @each $option in $options {
        @include md-box-display($option);
        @include md-box-position($option);
        @include md-box-overflow($option);
        @include md-box-float($option);
        @include md-box-size($option);
    }
}