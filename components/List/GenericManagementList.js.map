{"version":3,"sources":["src/method/components/List/GenericManagementList.tsx"],"names":[],"mappings":"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","file":"GenericManagementList.js","sourcesContent":["import { DEFAULT_ENCODING } from 'crypto';\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport { DivProps, ButtonProps, Elements as Attr, OptionAttr, mergeAttributes, mergeAttributeObjects } from '../../Attributes';\r\nimport { Icon, IconAttributes } from '../Icon';\r\nimport { MethodNode, GridColumn, SortDirection } from '../../Common';\r\nimport { CheckboxInput, CheckboxInputAttributes } from '../Input/CheckboxInput';\r\nconst css = classNames.bind(require('./GenericManagementList.scss'));\r\n\r\nexport interface GenericManagementListComponentType { }\r\n\r\nexport interface GenericManagementListAttributes {\r\n    container?: DivProps;\r\n    column?: DivProps;\r\n    rowContent?: DivProps;\r\n    rowHeaderButton?: ButtonProps;\r\n    rowHeaderChevron?: IconAttributes;\r\n    selectAllEmpty?: DivProps;\r\n    selectAllCheckbox?: CheckboxInputAttributes;\r\n    selectAllContainer?: DivProps;\r\n    selectRowContent?: DivProps;\r\n    selectRowCheckbox?: CheckboxInputAttributes;\r\n}\r\n\r\nexport interface GenericManagementListProps<T> extends React.Props<GenericManagementListComponentType> {\r\n    /**\r\n     * List of `GridColumn` objects that provide mappings from row type T to\r\n     * column values and sorting\r\n     *\r\n     * See documentation for GridColumn<T> for more information\r\n     */\r\n    columns: Array<GridColumn<T> & OptionAttr<DivProps>>;\r\n    /**\r\n     * List of row objects\r\n     *\r\n     * This can be a list of anything that satisfies the GridColumn callbacks\r\n     * provided in props.columns\r\n     */\r\n    rows: Array<T & OptionAttr<DivProps>>;\r\n    /**\r\n     * HTML input element name prefix to use for checkboxes\r\n     *\r\n     * default: management-list\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Callback for checkbox value changes\r\n     *\r\n     * If this callback is not provided, row selection checkboxes will not be shown\r\n     */\r\n    onSelect?: (row: T, newValue: boolean) => void;\r\n    /**\r\n     * Callback for select all checkbox value changes\r\n     *\r\n     * If this callback is not provided, select all checkbox will not be shown\r\n     */\r\n    onSelectAll?: (allSelected: boolean) => void;\r\n    /**\r\n     * A key of row type `T` or callback that returns whether a row is selected.\r\n     *\r\n     * If this is not provided, row selection checkboxes will not be shown\r\n     */\r\n    isSelected?: ((row: T) => boolean) | keyof T;\r\n\r\n    /**\r\n     * A key of row type `T` or callback that returns the label for the select checkbox\r\n     * for accessibility.\r\n     *\r\n     * If this is not provided, no label will be rendered.\r\n     */\r\n    selectLabel?: ((row: T) => MethodNode) | keyof T;\r\n    /**\r\n     * A label for the select all checkbox for accessibility\r\n     */\r\n    selectAllLabel?: MethodNode;\r\n\r\n    /**\r\n     * Currently sorted column\r\n     */\r\n    sortedColumn?: GridColumn<T>;\r\n    /**\r\n     * Direction of current sort\r\n     *\r\n     * 'ascending' | 'descending'\r\n     *\r\n     * Default: 'ascending'\r\n     */\r\n    sortDirection?: SortDirection;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n\r\n    attr?: GenericManagementListAttributes;\r\n}\r\n\r\n/**\r\n * Generic Management List\r\n *\r\n * To use this component in TSX:\r\n *\r\n * ```ts\r\n * type CustomManagementList = GenericManagementList<Type>;\r\n *\r\n * <CustomManagementList rows={Type[]} columns={GridColumn<Type>} />\r\n * ```\r\n *\r\n * If you don't need type checking, you should use `ManagementList` instead.\r\n *\r\n * @param props Control properties (defined in `GenericManagementListProps` interface)\r\n */\r\nexport class GenericManagementList<T> extends React.PureComponent<GenericManagementListProps<T>, {}> {\r\n    static defaultProps = {\r\n        name: 'management-list',\r\n        selectAllLabel: 'Select All',\r\n        selectLabel: () => '',\r\n        defaultDirection: 'ascending',\r\n        attr: {\r\n            container: {},\r\n            column: {},\r\n            rowHeader: {},\r\n            rowContent: {},\r\n            rowHeaderChevron: {},\r\n            selectAllContainer: {},\r\n            selectAllEmptyContainer: {},\r\n            selectAllCheckbox: {},\r\n            selectRowContainer: {},\r\n            selectRowCheckbox: {},\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let columns = this.props.columns.map(col => []);\r\n        this.props.columns.forEach((column, colIndex) => {\r\n            let onClick: (event) => void = null;\r\n            let labelSuffix: MethodNode = '';\r\n            const sortable = column.onAscending && column.onDescending;\r\n            if (sortable) {\r\n                if (this.props.sortedColumn === column) {\r\n                    let icon = '';\r\n                    if (this.props.sortDirection === 'descending') {\r\n                        icon = 'chevronDown';\r\n                        onClick = event => column.onAscending();\r\n                    } else {\r\n                        icon = 'chevronUp';\r\n                        onClick = event => column.onDescending();\r\n                    }\r\n                    labelSuffix = <Icon\r\n                        icon={icon}\r\n                        fontSize={12}\r\n                        className={css('sort-direction')}\r\n                        attr={this.props.attr.rowHeaderChevron}\r\n                    />;\r\n                } else {\r\n                    onClick = column.defaultDirection === 'descending'\r\n                        ? event => column.onDescending()\r\n                        : event => column.onAscending();\r\n                }\r\n            }\r\n            columns[colIndex].push(\r\n                <Attr.button\r\n                    type='button'\r\n                    className={css('column-header')}\r\n                    key={`header-${colIndex}`}\r\n                    onClick={onClick}\r\n                    disabled={!sortable}\r\n                    attr={this.props.attr.rowHeaderButton}\r\n                >\r\n                    {column.label}{labelSuffix}\r\n                </Attr.button>\r\n            );\r\n            columns[colIndex].push(\r\n                this.props.rows.map((row, rowIndex) => {\r\n                    let content;\r\n                    if (column.mapColumn instanceof Function) {\r\n                        content = column.mapColumn(row);\r\n                    } else {\r\n                        const colValue: any = row[column.mapColumn];\r\n                        if (\r\n                            typeof (colValue) === 'string' ||\r\n                            colValue instanceof React.Component ||\r\n                            colValue instanceof React.PureComponent\r\n                        ) {\r\n                            content = colValue;\r\n                        } else {\r\n                            if (DEBUG) {\r\n                                console.error('Method Error: Management List Column property mapColumn must return a valid React Node');\r\n                            }\r\n                        }\r\n                    }\r\n                    return (\r\n                        <Attr.label\r\n                            className={css('column-content')}\r\n                            key={rowIndex}\r\n                            htmlFor={`${this.props.name}-select-${rowIndex}_checkbox`}\r\n                            attr={mergeAttributes(this.props.attr.rowContent, row.attr)}\r\n                        >\r\n                            {content}\r\n                        </Attr.label>\r\n                    );\r\n                }\r\n                ));\r\n        });\r\n\r\n        if (this.props.onSelect && this.props.isSelected) {\r\n            const selected = this.props.rows.map(row =>\r\n                this.props.isSelected instanceof Function\r\n                    ? this.props.isSelected(row)\r\n                    : row[this.props.isSelected]\r\n            );\r\n            const allSelected = selected.filter(row => row).length === selected.length;\r\n            const checkboxCol = [];\r\n            const selectAll = !this.props.onSelectAll\r\n                ? <Attr.div\r\n                    className={css('checkbox-empty')}\r\n                    attr={this.props.attr.selectAllEmpty}\r\n                />\r\n                : <CheckboxInput\r\n                    name={`${this.props.name}-select-all`}\r\n                    label={\r\n                        <Attr.div className={css('select-all-label')}>\r\n                            {this.props.selectAllLabel}\r\n                        </Attr.div>\r\n                    }\r\n                    className={css({\r\n                        'list-checkbox-container': allSelected\r\n                    })}\r\n                    checked={allSelected}\r\n                    onChange={newValue => this.props.onSelectAll(newValue)}\r\n                    attr={mergeAttributeObjects(\r\n                        this.props.attr.selectAllCheckbox, {\r\n                            checkbox: {\r\n                                className: css('list-checkbox-button')\r\n                            },\r\n                            checkmarkIcon: {\r\n                                container: { className: css('list-checkbox-checkmark') }\r\n                            },\r\n                        },\r\n                        ['container', 'label', 'input', 'text', 'checkbox', 'indeterminateFill', 'checkmarkIcon', 'border']\r\n                    )}\r\n                />;\r\n\r\n            checkboxCol.push(\r\n                <Attr.div\r\n                    className={css('column-header', 'checkbox', {\r\n                        'checkbox-empty': !this.props.onSelectAll\r\n                    })}\r\n                    key={'select-all'}\r\n                    attr={this.props.attr.selectAllContainer}\r\n                >\r\n                    {selectAll}\r\n                </Attr.div>\r\n            );\r\n\r\n            this.props.rows.forEach((row, index) => {\r\n                let selectLabel;\r\n                if (this.props.selectLabel instanceof Function) {\r\n                    selectLabel = this.props.selectLabel(row);\r\n                } else {\r\n                    const colValue: any = row[this.props.selectLabel];\r\n                    if (\r\n                        typeof (colValue) === 'string' ||\r\n                        colValue instanceof React.Component ||\r\n                        colValue instanceof React.PureComponent\r\n                    ) {\r\n                        selectLabel = colValue;\r\n                    } else {\r\n                        if (DEBUG) {\r\n                            console.error('Method Error: Management List Column property selectLabel must return a valid React Node');\r\n                        }\r\n                    }\r\n                }\r\n                const isSelected = this.props.isSelected instanceof Function\r\n                    ? this.props.isSelected(row)\r\n                    : !!row[this.props.isSelected];\r\n                checkboxCol.push(\r\n                    <Attr.div\r\n                        className={css('column-content', 'checkbox')}\r\n                        key={`select-${index}`}\r\n                        attr={mergeAttributes(this.props.attr.selectRowContent, row.attr)}\r\n                    >\r\n                        <CheckboxInput\r\n                            name={`${this.props.name}-select-${index}`}\r\n                            label={\r\n                                <Attr.div className={css('select-all-label')}>\r\n                                    {selectLabel}\r\n                                </Attr.div>\r\n                            }\r\n                            className={css({\r\n                                'list-checkbox-container': isSelected\r\n                            })}\r\n                            checked={isSelected}\r\n                            onChange={newValue => this.props.onSelect(row, newValue)}\r\n                            attr={mergeAttributeObjects(\r\n                                this.props.attr.selectRowCheckbox, {\r\n                                    checkbox: {\r\n                                        className: css('list-checkbox-button')\r\n                                    },\r\n                                    checkmarkIcon: {\r\n                                        container: { className: css('list-checkbox-checkmark') }\r\n                                    },\r\n                                },\r\n                                ['container', 'label', 'input', 'text', 'checkbox', 'indeterminateFill', 'checkmarkIcon', 'border']\r\n                            )}\r\n                        />\r\n                    </Attr.div>\r\n                );\r\n            });\r\n            columns = [checkboxCol, ...columns];\r\n        }\r\n\r\n        return (\r\n            <Attr.div\r\n                className={css('list-container')}\r\n                attr={this.props.attr.container}\r\n            >\r\n                {columns.map((col, index) => {\r\n                    const style: any = {};\r\n                    const offset = columns.length - this.props.columns.length;\r\n                    let column: any = this.props.columns[index - offset];\r\n                    if (index >= offset) {\r\n                        if (column.width) {\r\n                            style.flexBasis = `${column.width}px`;\r\n                        }\r\n                    } else {\r\n                        column = { attr: {} };\r\n                    }\r\n                    return (\r\n                        <Attr.div\r\n                            className={css('column', {\r\n                                'checkbox': index === 0\r\n                                    && this.props.isSelected\r\n                                    && this.props.onSelect,\r\n                                'auto-width': index >= offset ? !column.width : false\r\n                            })}\r\n                            key={index}\r\n                            style={style}\r\n                            attr={mergeAttributes(this.props.attr.column, column.attr)}\r\n                        >\r\n                            {col}\r\n                        </Attr.div>\r\n                    );\r\n                }\r\n                )}\r\n            </Attr.div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GenericManagementList;\r\n"]}