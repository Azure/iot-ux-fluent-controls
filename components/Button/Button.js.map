{"version":3,"sources":["src/method/components/Button/Button.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAC9C,iDAAuG;AAEvG,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;AAiC1D;;;;GAIG;AACU,QAAA,MAAM,GAA0C,CAAC,KAAkB,EAAE,EAAE;IAChF,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAC,qBAAI,CAAC,IAAI,IAChC,SAAS,EAAE,GAAG,CAAC,aAAa,KAAK,CAAC,IAAI,EAAE,CAAC,EACzC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,GACvB,CAAC,CAAC,CAAC,EAAE,CAAC;IAER,MAAM,CAAC,CACH,oBAAC,qBAAI,CAAC,MAAM,IACR,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,SAAS,EAAE,GAAG,CAAC,YAAY,EAAE;YACzB,oBAAoB,EAAE,KAAK,CAAC,OAAO;SACtC,EAAE,KAAK,CAAC,SAAS,CAAC,EACnB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS;QAEzB,IAAI;QACJ,KAAK,CAAC,QAAQ,CACL,CACjB,CAAC;AACN,CAAC,CAAC;AAEF,cAAM,CAAC,YAAY,GAAG;IAClB,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE,QAAQ;IACd,IAAI,EAAE;QACF,SAAS,EAAE,EAAE;QACb,IAAI,EAAE,EAAE;KACX;CACJ,CAAC;AAEF,kBAAe,cAAM,CAAC","file":"Button.js","sourcesContent":["import * as React from 'react';\r\nimport * as classnames from 'classnames/bind';\r\nimport {DivProps, SpanProps, ButtonProps as AttrButtonProps, Elements as Attr} from '../../Attributes';\r\nimport {Icon, IconSize, IconAttributes} from '../Icon';\r\nconst css = classnames.bind(require('../../Button.scss'));\r\n\r\nexport interface ButtonComponentType {}\r\n\r\nexport interface ButtonAttributes {\r\n    container?: AttrButtonProps;\r\n    icon?: SpanProps;\r\n}\r\n\r\nexport interface ButtonProps extends React.Props<ButtonComponentType> {\r\n    /** Button title attribute */\r\n    title?: string;\r\n    /** Button type attribute */\r\n    type?: string;\r\n    /** Icon name (from Segoe UI MDL font) */\r\n    icon?: string;\r\n    /** Use primary style */\r\n    primary?: boolean;\r\n    \r\n    /** Disable button */\r\n    disabled?: boolean;\r\n\r\n    /** \r\n     * Callback for button onClick\r\n     */    \r\n    onClick: (event) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n\r\n    attr?: ButtonAttributes;\r\n}\r\n\r\n/**\r\n * Button showing Information, Warning, or Error with text, icon, and optional close button\r\n * \r\n * @param props Control properties (defined in `ButtonProps` interface)\r\n */\r\nexport const Button: React.StatelessComponent<ButtonProps> = (props: ButtonProps) => {\r\n    const icon = props.icon ? <Attr.span\r\n        className={css(`icon icon-${props.icon}`)}\r\n        attr={props.attr.icon}\r\n    /> : '';\r\n\r\n    return (\r\n        <Attr.button\r\n            type={props.type}\r\n            title={props.title}\r\n            className={css('method-btn', {\r\n                'method-btn-primary': props.primary\r\n            }, props.className)}\r\n            onClick={props.onClick}\r\n            disabled={props.disabled}\r\n            attr={props.attr.container}\r\n        >\r\n            {icon}\r\n            {props.children}\r\n        </Attr.button>\r\n    );\r\n};\r\n\r\nButton.defaultProps = {\r\n    onClick: undefined,\r\n    type: 'button',\r\n    attr: {\r\n        container: {},\r\n        icon: {}\r\n    }\r\n};\r\n\r\nexport default Button;\r\n"]}