{"version":3,"sources":["src/method/components/DateTime/DateTimeField.tsx"],"names":[],"mappings":"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","file":"DateTimeField.js","sourcesContent":["import { DatePickerProps } from '../../index';\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {MethodNode, dateIsValid, DateFormat} from '../../Common';\r\nimport {FormField, FormFieldAttributes} from '../Field/FormField';\r\n/** This import solves an error with exports of FormFieldAttributes defaults */\r\nimport {FormErrorAttributes} from '../Field/FormError';\r\nimport {TimeInput, TimeInputAttributes} from './TimeInput';\r\nimport {DatePicker, DatePickerAttributes} from './DatePicker';\r\nimport {DivProps, SpanProps, Elements as Attr} from '../../Attributes';\r\nconst css = classNames.bind(require('./DateTimeField.scss'));\r\n\r\nexport interface DateTimeFieldType {}\r\n\r\nexport interface DateTimeFieldAttributes {\r\n    datePicker?: DatePickerAttributes;\r\n    timeInput?: TimeInputAttributes;\r\n    flexContainer?: DivProps;\r\n    dateColumn?: SpanProps;\r\n    timeColumn?: SpanProps;\r\n}\r\n\r\nexport interface DateTimeFieldProps extends React.Props<DateTimeFieldType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML input element */\r\n    initialValue: string | Date;\r\n    \r\n    /** Label to display above input element */\r\n    label: MethodNode;\r\n    /** Error to display below input element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n\r\n    /** Date format in text input */\r\n    format?: DateFormat;\r\n    /** Tab index for calendar control */\r\n    tabIndex?: number;\r\n    /** Label for \"AM\" select option */\r\n    amLabel?: string;\r\n    /** Label for \"PM\" select option */\r\n    pmLabel?: string;\r\n\r\n    /**\r\n     * Display the date in local timezone instead of GMT\r\n     *\r\n     * Default: true\r\n     */\r\n    localTimezone?: boolean;\r\n    /**\r\n     * Show Calendar below date picker input\r\n     */\r\n    showAbove?: boolean;\r\n    /** Display the seconds dropdown */\r\n    showSeconds?: boolean;\r\n    /** Use 24 hour clock */\r\n    militaryTime?: boolean;\r\n    /** Disable HTML input element */\r\n    disabled?: boolean;\r\n    /** Form field is required (appends a red asterisk to the label) */\r\n    required?: boolean;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Set error field to display: none */\r\n    hideError?: boolean;\r\n    \r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: string) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level element of DatePicker and TimeInput */\r\n    inputClassName?: string;\r\n\r\n    attr?: DateTimeFieldAttributes & FormFieldAttributes;\r\n}\r\n\r\nexport interface DateTimeFieldState {\r\n    initialDate: string | Date;\r\n    lastDate: string;\r\n    lastTime: string;\r\n}\r\n\r\n/**\r\n * High level date time field\r\n * \r\n * @param props Control properties (defined in `DateTimeFieldProps` interface)\r\n */\r\nexport class DateTimeField extends React.Component<DateTimeFieldProps, Partial<DateTimeFieldState>> {\r\n    static defaultProps = {\r\n        format: DateFormat.MMDDYYYY,\r\n        tabIndex: -1,\r\n        localTimezone: true,\r\n        showAbove: false,\r\n        showSeconds: false,\r\n        militaryTime: false,\r\n        attr: {\r\n            fieldContainer: {},\r\n            fieldLabel: {},\r\n            fieldContent: {},\r\n            fieldError: {},\r\n            flexContainer: {},\r\n            dateColumn: {},\r\n            timeColumn: {},\r\n            datePicker: {\r\n                container: {},\r\n                inputContainer: {},\r\n                input: {},\r\n                inputIcon: {},\r\n                dropdownContainer: {},\r\n                dropdownTriangle: {},\r\n                calendar: {},\r\n            },\r\n            timeInput: {\r\n                container: {},\r\n                hourSelect: {},\r\n                hourOption: {},\r\n                minuteSelect: {},\r\n                minuteOption: {},\r\n                secondSelect: {},\r\n                secondOption: {},\r\n                periodSelect: {},\r\n                periodOption: {},\r\n            }\r\n        }\r\n    };\r\n\r\n    constructor(props: DateTimeFieldProps) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState(props);\r\n    }\r\n\r\n    getInitialState(props: DateTimeFieldProps): DateTimeFieldState {\r\n        let datetime = null, timeValue = null, dateValue = null;\r\n\r\n        const local = props.localTimezone;\r\n        let invalid = false;\r\n        let initialValue = null;\r\n        if (props.initialValue) {\r\n            if (typeof props.initialValue === 'string') {\r\n                const date = new Date(props.initialValue);\r\n                if (dateIsValid(date, local)) {\r\n                    /** \r\n                     * This is where DateTimeField receives an initial Date value\r\n                     * so this is where localTimezone/GMT have to be handled.\r\n                     * \r\n                     * Calling new Date(Date.UTC(year, month, date, ...)) creates\r\n                     * a Date object that looks like the local timezone but actually\r\n                     * represents a time in GMT\r\n                     */\r\n                    initialValue = local\r\n                        ? date\r\n                        : new Date(Date.UTC(\r\n                            date.getUTCFullYear(),\r\n                            date.getUTCMonth(),\r\n                            date.getUTCDate(),\r\n                            date.getUTCHours(),\r\n                            date.getUTCMinutes(),\r\n                            date.getUTCSeconds()\r\n                        ));\r\n                } else {\r\n                    invalid = true;\r\n                }\r\n            } else {\r\n                if (!dateIsValid(props.initialValue, local)) {\r\n                    invalid = true;\r\n                } else {\r\n                    /** \r\n                     * This is where DateTimeField receives an initial Date value\r\n                     * so this is where localTimezone/GMT have to be handled.\r\n                     * \r\n                     * Calling new Date(Date.UTC(year, month, date, ...)) creates\r\n                     * a Date object that looks like the local timezone but actually\r\n                     * represents a time in GMT\r\n                     */\r\n                    initialValue = local\r\n                        ? new Date(props.initialValue)\r\n                        : new Date(Date.UTC(\r\n                            props.initialValue.getUTCFullYear(),\r\n                            props.initialValue.getUTCMonth(),\r\n                            props.initialValue.getUTCDate(),\r\n                            props.initialValue.getUTCHours(),\r\n                            props.initialValue.getUTCMinutes(),\r\n                            props.initialValue.getUTCSeconds()\r\n                        ));\r\n                }\r\n            }\r\n        }\r\n\r\n        let defaultTime = null;\r\n        if (invalid) {\r\n            const date = new Date();\r\n            defaultTime = props.localTimezone ? date\r\n                : new Date(Date.UTC(\r\n                    date.getUTCFullYear(),\r\n                    date.getUTCMonth(),\r\n                    date.getUTCDate(),\r\n                    date.getUTCHours(),\r\n                    date.getUTCMinutes(),\r\n                    date.getUTCSeconds()\r\n                ));\r\n        }\r\n\r\n        return { \r\n            initialDate: invalid ? props.initialValue : initialValue.toJSON(),\r\n            lastTime: invalid ? defaultTime.toJSON() : initialValue.toJSON(),\r\n            lastDate: invalid ? 'invalid' : initialValue.toJSON()\r\n         };\r\n    }\r\n\r\n    componentWillReceiveProps(newProps: DateTimeFieldProps) {\r\n        if (this.props.initialValue !== newProps.initialValue || this.props.localTimezone !== newProps.localTimezone) {\r\n            this.setState(this.getInitialState(newProps));\r\n        }\r\n    }\r\n\r\n    onDatePaste(newDate: string): boolean {\r\n        const date = new Date(newDate);\r\n        if (dateIsValid(date, this.props.localTimezone)) {\r\n            const utcDate = date.toJSON();\r\n            this.setState({\r\n                initialDate: date,\r\n                lastDate: utcDate,\r\n                lastTime: utcDate\r\n            });\r\n            this.props.onChange(utcDate);\r\n            return false;\r\n        }\r\n        this.setState({\r\n            lastDate: 'invalid'\r\n        });\r\n        this.props.onChange('invalid');\r\n        return true;\r\n    }\r\n\r\n    onChange(newDate: string | Date, newTime: string | Date): Date {\r\n        if (newDate === 'invalid' || newTime === 'invalid' || !newDate || !newTime) {\r\n            this.props.onChange('invalid');\r\n            return null;\r\n        }\r\n\r\n        const date = typeof(newDate) === 'string' ? new Date(newDate) : newDate;\r\n        const time = typeof(newTime) === 'string' ? new Date(newTime) : newTime;\r\n        const newValue = this.props.localTimezone\r\n            ? new Date(\r\n                date.getFullYear(),\r\n                date.getMonth(),\r\n                date.getDate(),\r\n                time.getHours(),\r\n                time.getMinutes(),\r\n                time.getSeconds()\r\n            ) : new Date(Date.UTC(\r\n                date.getUTCFullYear(),\r\n                date.getUTCMonth(),\r\n                date.getUTCDate(),\r\n                time.getUTCHours(),\r\n                time.getUTCMinutes(),\r\n                time.getUTCSeconds()\r\n            ));\r\n        const utcValue = newValue.toJSON();\r\n        if (utcValue === 'Invalid Date') {\r\n            this.props.onChange('invalid');\r\n        } else {\r\n            this.props.onChange(utcValue);\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    onDateChange(newDate: string) {\r\n        const newValue = this.onChange(newDate, this.state.lastTime);\r\n        if (newValue) {\r\n            const utcValue = newValue.toJSON();\r\n            this.setState({\r\n                lastTime: utcValue,\r\n                lastDate: utcValue\r\n            });\r\n        } else {\r\n            this.setState({\r\n                lastDate: newDate\r\n            });\r\n        }\r\n    }\r\n    \r\n    onTimeChange(newTime: string) {\r\n        const newValue = this.onChange(this.state.lastDate, newTime);\r\n        if (newValue) {\r\n            const utcValue = newValue.toJSON();\r\n            this.setState({\r\n                initialDate: newValue,\r\n                lastTime: utcValue,\r\n                lastDate: utcValue\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FormField\r\n                name={this.props.name}\r\n                label={this.props.label}\r\n                error={this.props.error}\r\n                errorTitle={this.props.errorTitle}\r\n                loading={this.props.loading}\r\n                required={this.props.required}\r\n                hideError={this.props.hideError}\r\n                className={css('datetime-field', this.props.className)}\r\n                attr={this.props.attr}\r\n            >\r\n                <Attr.div\r\n                    className={css('field-content')}\r\n                    attr={this.props.attr.flexContainer}\r\n                >\r\n                    <Attr.span\r\n                        className={css('field-date')}\r\n                        attr={this.props.attr.dateColumn}\r\n                    >\r\n                        <DatePicker\r\n                            name={this.props.name}\r\n                            initialValue={this.state.initialDate}\r\n                            tabIndex={this.props.tabIndex}\r\n                            error={!!this.props.error}\r\n                            disabled={this.props.disabled}\r\n                            localTimezone={this.props.localTimezone}\r\n                            showAbove={this.props.showAbove}\r\n                            format={this.props.format}\r\n                            required={this.props.required}\r\n                            onPaste={newDate => this.onDatePaste(newDate)}\r\n                            onChange={newDate => this.onDateChange(newDate)}\r\n                            className={css('date-picker', this.props.inputClassName)}\r\n                            attr={this.props.attr.datePicker}\r\n                        />\r\n                    </Attr.span>\r\n                    <Attr.span\r\n                        className={css('field-time')}\r\n                        attr={this.props.attr.dateColumn}\r\n                    >\r\n                        <TimeInput\r\n                            name={this.props.name}\r\n                            value={this.state.lastTime}\r\n                            amLabel={this.props.amLabel}\r\n                            pmLabel={this.props.pmLabel}\r\n                            localTimezone={this.props.localTimezone}\r\n                            showSeconds={this.props.showSeconds}\r\n                            militaryTime={this.props.militaryTime}\r\n                            error={!!this.props.error}\r\n                            disabled={this.props.disabled}\r\n                            onChange={newTime => this.onTimeChange(newTime)}\r\n                            className={css('time-picker', this.props.inputClassName)}\r\n                            attr={this.props.attr.timeInput}\r\n                        />\r\n                    </Attr.span>\r\n                </Attr.div>\r\n            </FormField>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateTimeField;\r\n"]}