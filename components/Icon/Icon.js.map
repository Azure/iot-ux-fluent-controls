{"version":3,"sources":["src/method/components/Icon/Icon.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAC9C,iDAA6D;AAC7D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;AAEpD,IAAY,QAaX;AAbD,WAAY,QAAQ;IAChB,OAAO;IACP,2CAAU,CAAA;IACV,OAAO;IACP,yCAAK,CAAA;IACL,OAAO;IACP,2CAAM,CAAA;IACN,OAAO;IACP,yCAAK,CAAA;IACL,OAAO;IACP,2CAAM,CAAA;IACN,OAAO;IACP,6CAAO,CAAA;AACX,CAAC,EAbW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAanB;AAgDD;;;;;;GAMG;AACU,QAAA,IAAI,GAAwC,CAAC,KAAgB,EAAE,EAAE;IAC1E,IAAI,aAAa,GAAG,QAAQ,KAAK,CAAC,IAAI,EAAE,CAAC;IACzC,IAAI,GAAG,GAAG,GAAG,CAAC;QACV,aAAa,EAAE,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM;QAC7C,YAAY,EAAE,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK;QAC3C,aAAa,EAAE,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM;QAC7C,YAAY,EAAE,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,KAAK;QAC3C,aAAa,EAAE,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,MAAM;QAC7C,cAAc,EAAE,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,OAAO;QAC/C,UAAU,EAAE,KAAK,CAAC,QAAQ;KAC7B,EAAE,aAAa,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IAEnC,IAAI,KAAK,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC;IACnC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjB,KAAK,CAAC,UAAU,CAAC,GAAG,GAAG,KAAK,CAAC,QAAQ,IAAI,CAAC;IAC9C,CAAC;IAED,IAAI,KAAK,CAAC;IACV,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjB,KAAK,GAAG,CACJ,oBAAC,qBAAI,CAAC,IAAI,IACN,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,IAErB,KAAK,CAAC,QAAQ,CACP,CACf,CAAC;IACN,CAAC;IAED,MAAM,CAAC,CACH,oBAAC,qBAAI,CAAC,IAAI,IACN,SAAS,EAAE,GAAG,EACd,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS,IAEzB,KAAK,CACE,CACf,CAAC;AACN,CAAC,CAAC;AAEF,YAAI,CAAC,YAAY,GAAG;IAChB,IAAI,EAAE,SAAS;IACf,IAAI,EAAE,QAAQ,CAAC,MAAM;IACrB,IAAI,EAAE;QACF,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,EAAE;KACZ;CACJ,CAAC;AAEF,kBAAe,YAAI,CAAC","file":"Icon.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {Elements as Attr, SpanProps} from '../../Attributes';\r\nconst css = classNames.bind(require('./Icon.scss'));\r\n\r\nexport enum IconSize {\r\n    // 16px\r\n    xsmall = 1,\r\n    // 32px\r\n    small,\r\n    // 48px\r\n    medium,\r\n    // 64px\r\n    large,\r\n    // 80px\r\n    xlarge,\r\n    // 96px\r\n    xxlarge\r\n}\r\n\r\nexport interface IconType {}\r\n\r\nexport interface IconAttributes {\r\n    container?: SpanProps;\r\n    label?: SpanProps;\r\n}\r\n\r\nexport interface IconProps extends React.Props<IconType> {\r\n    /** Icon name (from Segoe UI MDL font) */\r\n    icon: string;\r\n\r\n    /**\r\n     * Icon font size as defined by `IconSize` enum\r\n     * \r\n     * `IconSize.[xsmall | small | medium | large | xlarge | xxlarge]`\r\n     * \r\n     * Starts at 16 pixels (`IconSize.xsmall`) and increases 16 pixels at a\r\n     * time until 96 pixels (`IconSize.xxlarge`)\r\n     * \r\n     * Defaults: `IconSize.medium` (48x48 pixels)\r\n     */\r\n    size?: IconSize;\r\n    /**\r\n     * Icon font size\r\n     * \r\n     * Overrides `IconProps.size`\r\n     */\r\n    fontSize?: number;\r\n    /** Icon color (accepts string color names and RGB hex values) */\r\n    color?: string;\r\n    /** Center vertically and horizontally in parent element */\r\n    centered?: boolean;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /**\r\n     * Classname for Icon label\r\n     * \r\n     * Even with props.className getting CSS specificity right to modify font-\r\n     * size of the label is problematic.\r\n     */\r\n    labelClassName?: string;\r\n\r\n    attr?: IconAttributes;\r\n}\r\n\r\n/**\r\n * Icon loaded from Segoe UI MDL icons font\r\n * \r\n * Renders children so this control can be used with text\r\n * \r\n * @param props Control properties (Defined in `IconProps` interface)\r\n */\r\nexport const Icon: React.StatelessComponent<IconProps> = (props: IconProps) => {\r\n    let iconClassName = `icon-${props.icon}`;\r\n    let cls = css({\r\n        'icon-xsmall': props.size === IconSize.xsmall,\r\n        'icon-small': props.size === IconSize.small,\r\n        'icon-medium': props.size === IconSize.medium,\r\n        'icon-large': props.size === IconSize.large,\r\n        'icon-xlarge': props.size === IconSize.xlarge,\r\n        'icon-xxlarge': props.size === IconSize.xxlarge,\r\n        'centered': props.centered\r\n    }, iconClassName, props.className);\r\n\r\n    let style = { color: props.color };\r\n    if (props.fontSize) {\r\n        style['fontSize'] = `${props.fontSize}px`;\r\n    }\r\n\r\n    let label;\r\n    if (props.children) {\r\n        label = (\r\n            <Attr.span\r\n                className={props.labelClassName}\r\n                attr={props.attr.label}\r\n            >\r\n                {props.children}\r\n            </Attr.span>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Attr.span\r\n            className={cls}\r\n            style={style}\r\n            attr={props.attr.container}\r\n        >\r\n            {label}\r\n        </Attr.span>\r\n    );\r\n};\r\n\r\nIcon.defaultProps = {\r\n    icon: undefined,\r\n    size: IconSize.medium,\r\n    attr: {\r\n        container: {},\r\n        label: {}\r\n    }\r\n};\r\n\r\nexport default Icon;\r\n"]}