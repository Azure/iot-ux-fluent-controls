{"version":3,"sources":["src/method/components/Input/TextInput.tsx"],"names":[],"mappings":"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","file":"TextInput.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {DivProps, ButtonProps, InputProps, Elements as Attr} from '../../Attributes';\r\nimport {Icon, IconSize} from '../Icon';\r\nimport {MethodNode, autoFocusRef} from '../../Common';\r\nconst css = classNames.bind(require('./TextInput.scss'));\r\n\r\nexport const prefixClassName = css('prefix-addon');\r\nexport const postfixClassName = css('postfix-addon');\r\n\r\nexport interface TextInputType {}\r\n\r\n\r\nexport interface TextInputAttributes {\r\n    container?: DivProps;\r\n    input?: InputProps;\r\n    inputContainer?: DivProps;\r\n    prefix?: DivProps;\r\n    postfix?: DivProps;\r\n    clearButton?: ButtonProps;\r\n}\r\n\r\nexport interface TextInputProps extends React.Props<TextInputType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML input element */\r\n    value: string;\r\n    /** HTML input element placeholder */\r\n    placeholder?: string;\r\n    /**\r\n     * HTML input element type\r\n     * \r\n     * Default: text\r\n     */\r\n    type?: string;\r\n\r\n    /** Node to draw to the left of the input box */\r\n    prefix?: MethodNode;\r\n    /** Class to append to prefix container */\r\n    prefixClassName?: string;\r\n    /** Node to draw to the right of the input box */\r\n    postfix?: MethodNode;\r\n    /** Class to append to postfix container */\r\n    postfixClassName?: string;\r\n    \r\n    /** Apply error styling to input element */\r\n    error?: boolean;\r\n    /** Add required attribute to HTML input element */\r\n    required?: boolean;\r\n    /** Disable HTML input element and apply disabled styling */\r\n    disabled?: boolean;\r\n    /** Read only HTML input element */\r\n    readOnly?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n\r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: string) => void;\r\n\r\n    /** Class to append to top level element */\r\n    className?: string;\r\n\r\n    attr?: TextInputAttributes;\r\n}\r\n\r\n/**\r\n * Low level text input control\r\n * \r\n * (Use the `TextField` control instead when making a form with standard styling)\r\n */\r\nexport const TextInput: React.StatelessComponent<TextInputProps> = (props: TextInputProps) => {\r\n    const containerClassName = css('text-input-container', props.className);\r\n    const inputContainerClassName = css('input-container');\r\n    const inputClassName = css({\r\n        'input': true,\r\n        'error': props.error,\r\n        'show-cancel': !!props.value && props.type !== 'number'\r\n    });\r\n    const cancelClassName = css('cancel', 'icon icon-cancelLegacy');\r\n\r\n    const onChange = (event) => {\r\n        if (props.value !== event.target.value) {\r\n            props.onChange(event.target.value);\r\n        }\r\n        event.stopPropagation();\r\n    };\r\n\r\n    const clearButton = props.disabled || props.type === 'number' ? '' :\r\n        <Attr.button\r\n            type='button'\r\n            className={cancelClassName}\r\n            onClick={() => props.onChange('')}\r\n            tabIndex={-1}\r\n            attr={props.attr.clearButton}\r\n        />;\r\n\r\n    let prefix = null;\r\n    if (props.prefix) {\r\n        const className = css('prefix', props.prefixClassName);\r\n        prefix = (\r\n            <Attr.div className={className} attr={props.attr.prefix}>\r\n                {props.prefix}\r\n            </Attr.div>\r\n        );\r\n    }\r\n\r\n    let postfix = null;\r\n    if (props.postfix) {\r\n        const className = css('postfix', props.postfixClassName);\r\n        postfix = (\r\n            <Attr.div className={className} attr={props.attr.postfix}>\r\n                {props.postfix}\r\n            </Attr.div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Attr.div className={containerClassName} attr={props.attr.container}>\r\n            {prefix}\r\n            <Attr.div\r\n                className={inputContainerClassName}\r\n                attr={props.attr.inputContainer}\r\n            >\r\n                <Attr.input \r\n                    type={props.type}\r\n                    name={props.name}\r\n                    value={props.value == null ? '' : props.value}\r\n                    className={inputClassName}\r\n                    onChange={onChange}\r\n                    placeholder={props.placeholder}\r\n                    required={props.required}\r\n                    disabled={props.disabled}\r\n                    readOnly={props.readOnly}                    \r\n                    autoFocus={props.autoFocus}\r\n                    methodRef={props.autoFocus && autoFocusRef}\r\n                    attr={props.attr.input}\r\n                />\r\n                {clearButton}\r\n            </Attr.div>\r\n            {postfix}\r\n        </Attr.div>\r\n    );\r\n};\r\n\r\nTextInput.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    onChange: undefined,\r\n    type: 'text',\r\n    attr: {\r\n        container: {},\r\n        input: {},\r\n        inputContainer: {},\r\n        prefix: {},\r\n        postfix: {},\r\n        clearButton: {},\r\n    }\r\n};\r\n\r\nexport default TextInput;\r\n"]}