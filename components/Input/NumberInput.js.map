{"version":3,"sources":["src/method/components/Input/NumberInput.tsx"],"names":[],"mappings":"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","file":"NumberInput.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {DivProps, ButtonProps, InputProps, Elements as Attr} from '../../Attributes';\r\nimport {Icon, IconSize} from '../Icon';\r\nimport {TextInput, TextInputAttributes} from './TextInput';\r\nimport {MethodNode, keyCode} from '../../Common';\r\nconst css = classNames.bind(require('./TextInput.scss'));\r\n\r\nexport interface NumberInputType {}\r\n\r\nconst invalidNumber = 'invalid';\r\n\r\nexport interface NumberInputProps extends React.Props<NumberInputType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML input element */\r\n    initialValue?: string | number;\r\n    /** HTML input element placeholder */\r\n    placeholder?: string;\r\n    /** Step to give the number input */\r\n    step?: number | 'any';\r\n    /** Minimum value of HTML Input element */\r\n    min?: number;\r\n    /** Maximum value of HTML Input element */\r\n    max?: number;\r\n\r\n    /** Node to draw to the left of the input box */\r\n    prefix?: MethodNode;\r\n    /** Node to draw to the right of the input box */\r\n    postfix?: MethodNode;\r\n    \r\n    /** Apply error styling to input element */\r\n    error?: boolean;\r\n    /** Add required attribute to HTML input element */\r\n    required?: boolean;\r\n    /** Disable HTML input element and apply disabled styling */\r\n    disabled?: boolean;\r\n    /** Read only HTML input element */\r\n    readOnly?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n\r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: number | 'invalid') => void;\r\n\r\n    /** Class to append to top level element */\r\n    className?: string;\r\n\r\n    attr?: TextInputAttributes;\r\n}\r\n\r\nexport interface NumberInputState {\r\n    value: string;\r\n    paste?: boolean;\r\n}\r\n\r\n/**\r\n * Low level text input control\r\n * \r\n * (Use the `TextField` control instead when making a form with standard styling)\r\n */\r\nexport class NumberInput extends React.Component<NumberInputProps, NumberInputState> {\r\n    static defaultProps = {\r\n        name: undefined,\r\n        initialValue: '',\r\n        onChange: undefined,\r\n        integer: false,\r\n        positive: false,\r\n        step: 'any',\r\n        attr: {\r\n            container: {},\r\n            input: {},\r\n            inputContainer: {},\r\n            prefix: {},\r\n            postfix: {},\r\n        }\r\n    };\r\n\r\n    private paste: boolean;\r\n\r\n    constructor(props: NumberInputProps) {\r\n        super(props);\r\n        \r\n        this.paste = false;\r\n        this.state = this.getInitialState(this.props.initialValue);\r\n    }\r\n\r\n    onKeyDown = (event) => {\r\n        /** So that we don't block any browser shortcuts */\r\n        if (event.ctrlKey || event.altKey) {\r\n            return;\r\n        }\r\n        /** These are all keys that don't have characters */\r\n        if (event.keyCode <= keyCode.slash) {\r\n            return;\r\n        }\r\n\r\n        // Allow numbers\r\n        if (event.keyCode >= keyCode.num0 && event.keyCode <= keyCode.num9) {\r\n            return;\r\n        }\r\n\r\n        // Allow numpad numbers\r\n        if (event.keyCode >= keyCode.numpad0 && event.keyCode <= keyCode.numpad9) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !this.isPositive()\r\n            /** Firefox uses a different keycode for dashes (-) than other browsers... */\r\n            && (event.keyCode === keyCode.dash || event.keyCode === keyCode.firefoxDash)\r\n            && this.state.value.indexOf('-') === -1\r\n        ) {\r\n            return;\r\n        }\r\n        \r\n        if (\r\n            !this.isInteger()\r\n            && event.keyCode === keyCode.period\r\n            && this.state.value.indexOf('.') === -1\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    isPositive(): boolean {\r\n        return typeof(this.props.min) === 'number' && this.props.min >= 0;\r\n    }\r\n\r\n    isInteger(): boolean {\r\n        return typeof(this.props.step) === 'number' && this.props.step % 1 === 0;\r\n    }\r\n\r\n    onChange = (newValue: string) => {\r\n        if (newValue === '' && this.state.value !== '') {\r\n            this.setState({value: '', paste: false});\r\n            return;\r\n        }\r\n        /** Reset our state machine */\r\n        const parsedValue = this.getValue(newValue);\r\n        let paste = this.state.paste;\r\n        if (parsedValue === invalidNumber) {\r\n            if (this.paste) {\r\n                this.paste = false;\r\n                this.setState({value: newValue, paste: true});\r\n                return;\r\n            } else {\r\n                this.setState({value: newValue});\r\n                return;\r\n            }\r\n        } else {\r\n            if (this.paste) {\r\n                newValue = parsedValue.toString();\r\n                this.paste = false;\r\n            }\r\n            paste = false;\r\n        }\r\n\r\n        if (this.isPositive() && parsedValue < 0) {\r\n            return; \r\n        }\r\n\r\n        this.setState({value: newValue, paste: paste});\r\n    }\r\n\r\n    onPaste = (event) => {\r\n        this.paste = true;\r\n    }\r\n\r\n    getInitialState(initialValue: number | string): NumberInputState {\r\n        let value = '';\r\n        if (typeof(initialValue) === 'number') {\r\n            value = initialValue.toString();\r\n        } else {\r\n            value = initialValue;\r\n        }\r\n\r\n        if (value === '' || value == null) {\r\n            value = '';\r\n        } else if (this.state && typeof(this.state.value) === 'string') {\r\n            if (parseFloat(this.state.value) === parseFloat(value)) {\r\n                value = this.state.value;\r\n            }\r\n        }\r\n\r\n        return {\r\n            value: value,\r\n            paste: false\r\n        };\r\n    }\r\n\r\n    getValue(value: string): number | 'invalid' {\r\n        if (value === '') {\r\n            return invalidNumber;\r\n        }\r\n        const decimalSeparator = '.';\r\n        const decimalSplit = value.split(decimalSeparator);\r\n        if (this.isInteger() && decimalSplit.length > 1) {\r\n            return invalidNumber;\r\n        }\r\n\r\n        value = value.replace(',', '');\r\n\r\n        let outValue = this.isInteger() ? parseInt(value) : parseFloat(value);\r\n        if (this.isPositive() && outValue < 0) {\r\n            return invalidNumber;\r\n        }\r\n\r\n        if (isNaN(outValue)) {\r\n            return invalidNumber;\r\n        }\r\n\r\n        return outValue;\r\n    }\r\n\r\n    componentDidUpdate(oldProps: NumberInputProps, oldState: NumberInputState) {\r\n        if (oldState.value === this.state.value) {\r\n            return;\r\n        }\r\n\r\n        if (this.state.value === '' || this.state.value == null) {\r\n            this.props.onChange(null);\r\n        } else {\r\n            this.props.onChange(this.getValue(this.state.value));\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(newProps: NumberInputProps) {\r\n        if (this.props.initialValue !== newProps.initialValue) {\r\n            this.setState(this.getInitialState(newProps.initialValue));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const inputAttr = this.props.attr && this.props.attr.input\r\n            ? this.props.attr.input : {};\r\n        const attr = {\r\n            ...(this.props.attr || {}),\r\n            input: {\r\n                ...inputAttr,\r\n                className: css('no-cancel'),\r\n                step: this.props.step,\r\n                min: this.props.min,\r\n                max: this.props.max,\r\n                onKeyDown: this.onKeyDown,\r\n                onPaste: this.onPaste,\r\n            }\r\n        };\r\n\r\n        return (\r\n            <TextInput\r\n                name={this.props.name}\r\n                value={this.state.value}\r\n                placeholder={this.props.placeholder}\r\n                type='number'\r\n                className={this.props.className}\r\n                prefix={this.props.prefix}\r\n                postfix={this.props.postfix}\r\n                error={this.props.error}\r\n                disabled={this.props.disabled}\r\n                readOnly={this.props.readOnly}\r\n                autoFocus={this.props.autoFocus}\r\n                onChange={this.onChange}\r\n                required={this.props.required}\r\n                attr={attr}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberInput;\r\n"]}