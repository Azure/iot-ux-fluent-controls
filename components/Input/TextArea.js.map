{"version":3,"sources":["src/method/components/Input/TextArea.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAC9C,iDAAgG;AAChG,yCAAsD;AACtD,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;AA2CxD;;;;GAIG;AACH,cAAsB,SAAQ,KAAK,CAAC,SAAuC;IAiBvE,YAAY,KAAoB;QAC5B,KAAK,CAAC,KAAK,CAAC,CAAC;QA4CT,iBAAY,GAAG,OAAO,CAAC,EAAE;YAC7B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,qBAAY,CAAC,OAAO,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC,CAAA;QAEO,cAAS,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;IAlDpD,CAAC;IAED,kBAAkB,CAAC,SAAwB,EAAE,SAAwB;QACjE,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC;QACvC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,SAAS,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;YAC7E,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC;QAC/C,CAAC;IACL,CAAC;IAED,MAAM;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAE/B,MAAM,CAAC,CACH,oBAAC,qBAAI,CAAC,GAAG,IACL,SAAS,EAAE,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAC1D,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS;YAE/B,oBAAC,qBAAI,CAAC,QAAQ,IACV,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EACrB,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,GAAG,CAAC,UAAU,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAC,CAAC,EACvD,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAC3D,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAC7B,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAC7B,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EACnC,SAAS,EAAE,IAAI,CAAC,YAAY,EAC5B,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAC7B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,GAChC;YACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAClB,oBAAC,qBAAI,CAAC,GAAG,IACL,SAAS,EAAE,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,EAC5C,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAExB,KAAK,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAChD;gBACf,CAAC,CAAC,EAAE,CACG,CACd,CAAC;IACN,CAAC;;AA3DM,qBAAY,GAAG;IAClB,QAAQ,EAAE,IAAI;IACd,KAAK,EAAE,KAAK;IACZ,QAAQ,EAAE,KAAK;IACf,KAAK,EAAE,EAAE;IACT,IAAI,EAAE;QACF,SAAS,EAAE,EAAE;QACb,QAAQ,EAAE,EAAE;QACZ,GAAG,EAAE,EAAE;KACV;CACJ,CAAC;AAXN,4BAsEC;AAED,kBAAe,QAAQ,CAAC","file":"TextArea.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {DivProps, SpanProps, PreProps, TextAreaProps, Elements as Attr} from '../../Attributes';\r\nimport {MethodNode, autoFocusRef} from '../../Common';\r\nconst css = classNames.bind(require('./TextArea.scss'));\r\n\r\nexport interface TextAreaType {}\r\n\r\nexport interface TextAreaAttributes {\r\n    container?: DivProps;\r\n    textarea?: TextAreaProps;\r\n    pre?: PreProps;\r\n}\r\n\r\nexport interface TextAreaProps extends React.Props<TextAreaType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML input element */\r\n    value?: string;\r\n    /** Text area placeholder */\r\n    placeholder?: string;\r\n    \r\n    /** Apply error styling to input element */\r\n    error?: boolean;\r\n    /** Add required attribute to HTML input element */\r\n    required?: boolean;\r\n    /** Disable HTML input element and apply disabled styling */\r\n    disabled?: boolean;\r\n    /** Read only HTML input element */\r\n    readOnly?: boolean;\r\n    /** Grow text area to fit user text */\r\n    autogrow?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n\r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: string) => void;\r\n\r\n    /** Class to append to top level element */\r\n    className?: string;\r\n\r\n    attr?: TextAreaAttributes;\r\n}\r\n\r\nexport interface TextAreaState {\r\n}\r\n\r\n/**\r\n * Low level text input control\r\n * \r\n * (Use the `TextField` control instead when making a form with standard styling)\r\n */\r\nexport class TextArea extends React.Component<TextAreaProps, TextAreaState> {\r\n    static defaultProps = {\r\n        autogrow: true,\r\n        error: false,\r\n        disabled: false,\r\n        value: '',\r\n        attr: {\r\n            container: {},\r\n            textarea: {},\r\n            pre: {}\r\n        }\r\n    };\r\n\r\n    private textarea: HTMLTextAreaElement;\r\n\r\n    private ghost: HTMLPreElement;\r\n\r\n    constructor(props: TextAreaProps) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: TextAreaProps, prevState: TextAreaState) {\r\n        const height = this.ghost.offsetHeight;\r\n        if (this.props.autogrow && prevProps.value !== this.props.value && height > 52) {\r\n            this.textarea.style.height = `${height}px`;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const value = this.props.value;\r\n\r\n        return (\r\n            <Attr.div\r\n                className={css('textarea-container', this.props.className)}\r\n                attr={this.props.attr.container}\r\n            >\r\n                <Attr.textarea\r\n                    name={this.props.name}\r\n                    value={value}\r\n                    className={css('textarea', {'error': this.props.error})}\r\n                    onChange={event => this.props.onChange(this.textarea.value)}\r\n                    disabled={this.props.disabled}\r\n                    readOnly={this.props.readOnly}\r\n                    placeholder={this.props.placeholder}\r\n                    methodRef={this.bindTextArea}\r\n                    autoFocus={this.props.autoFocus}\r\n                    required={this.props.required}\r\n                    attr={this.props.attr.textarea}\r\n                />\r\n                {this.props.autogrow ? \r\n                    <Attr.pre\r\n                        className={css('textarea', 'textarea-ghost')}\r\n                        methodRef={this.bindGhost}\r\n                        attr={this.props.attr.pre}\r\n                    >\r\n                        {value + (value[value.length - 1] === '\\n' ? '\\n' : '')}\r\n                    </Attr.pre> \r\n                : ''}\r\n            </Attr.div>\r\n        );\r\n    }\r\n\r\n    private bindTextArea = element => {\r\n        this.textarea = element;\r\n        if (this.props.autoFocus) {\r\n            autoFocusRef(element);\r\n        }\r\n    }\r\n    \r\n    private bindGhost = element => this.ghost = element;\r\n}\r\n\r\nexport default TextArea;\r\n"]}