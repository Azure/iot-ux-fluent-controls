{"version":3,"sources":["src/method/components/Input/SelectInput.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAC9C,iDAA8H;AAC7H,yCAAsD;AACvD,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAoD3D;;;;;;;;;;;GAWG;AACU,QAAA,WAAW,GAA+C,CAAC,KAAuB,EAAE,EAAE;IAC/F,MAAM,cAAc,GAAG,GAAG,CAAC,iBAAiB,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IAC/D,MAAM,UAAU,GAAG,GAAG,CAClB,OAAO,EAAE,EAAC,OAAO,EAAE,KAAK,CAAC,KAAK,EAAC,CAClC,CAAC;IACF,MAAM,cAAc,GAAG,GAAG,CACtB,OAAO,EAAE,8BAA8B,CAC1C,CAAC;IAEF,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;IACf,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;QAC3C,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YAC5B,KAAK,GAAG,KAAK,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,CACH,oBAAC,qBAAI,CAAC,MAAM,IACR,KAAK,EAAE,KAAK,EACZ,GAAG,EAAE,KAAK,EACV,QAAQ,EAAE,GAAG,CAAC,QAAQ,EACtB,MAAM,EAAE,GAAG,CAAC,MAAM,EAClB,SAAS,EAAE,GAAG,CAAC,EAAC,eAAe,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,EAAC,CAAC,EAC/C,IAAI,EAAE,4BAAe,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,IAEjD,GAAG,CAAC,KAAK,CACA,CACjB,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,CAAC,KAAK,EAAE,EAAE;QACvB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;QACzC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAM,CAAC,CACH,oBAAC,qBAAI,CAAC,GAAG,IAAC,SAAS,EAAE,cAAc,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,SAAS;QAC3D,oBAAC,qBAAI,CAAC,MAAM,IACR,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,UAAU,EACrB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,SAAS,EAAE,KAAK,CAAC,SAAS,IAAI,qBAAY,EAC1C,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,IAEtB,OAAO,CACE;QACd,oBAAC,qBAAI,CAAC,IAAI,IAAC,SAAS,EAAE,cAAc,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,CAC1D,CACd,CAAC;AACN,CAAC,CAAC;AAEF,mBAAW,CAAC,YAAY,GAAG;IACvB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE;QACF,SAAS,EAAE,EAAE;QACb,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,EAAE;KACd;CACJ,CAAC;AAEF,kBAAe,mBAAW,CAAC","file":"SelectInput.js","sourcesContent":["import * as React from 'react'; \r\nimport * as classNames from 'classnames/bind';\r\nimport {DivProps, SpanProps, SelectProps, OptionProps, Elements as Attr, OptionAttr, mergeAttributes} from '../../Attributes';\r\n import {FormOption, autoFocusRef} from '../../Common';\r\nconst css = classNames.bind(require('./SelectInput.scss'));\r\n\r\nexport interface SelectInputType {}\r\n\r\nexport interface SelectInputState {\r\n    cancelFocused: boolean;\r\n}\r\n\r\nexport interface SelectInputAttributes {\r\n    container?: DivProps;\r\n    select?: SelectProps;\r\n    option?: OptionProps;\r\n    chevron?: SpanProps;\r\n}\r\n\r\nexport interface SelectInputProps extends React.Props<SelectInputType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** \r\n     * Current value of HTML select element\r\n     * \r\n     * This must be an Object that is in `SelectInputProps.options`\r\n     */\r\n    value: any;\r\n    /** \r\n     * List of HTML select element options in the format:\r\n     * \r\n     * `{\r\n     *     label: string,\r\n     *     value: any\r\n     * }`\r\n     */\r\n    options: (FormOption & OptionAttr<OptionProps>)[];\r\n    \r\n    /** Apply error styling to input element */\r\n    error?: boolean;\r\n    /** Add required attribute to HTML input element */\r\n    required?: boolean;\r\n    /** Disable HTML input element and apply disabled styling */\r\n    disabled?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n\r\n    /** Callback for HTML select element onChange events */\r\n    onChange: (newValue: any) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n\r\n    attr?: SelectInputAttributes;\r\n}\r\n\r\n/**\r\n * Low level select combo box control\r\n * \r\n * IMPORTANT: The options provided to this control must all be UNIQUE. The \r\n * `value` property of option tags is the numerical index of the option in\r\n * `SelectInput.options` so `SelectInput.value` is compared to each value in\r\n * `options` (===) to decide which option is the one currently selected.\r\n * \r\n * (Use the `SelectField` control instead when making a form with standard styling)\r\n * \r\n * @param props Control properties (defined in `SelectInputProps` interface)\r\n */\r\nexport const SelectInput: React.StatelessComponent<SelectInputProps> = (props: SelectInputProps) => {\r\n    const containerClass = css('combo-container', props.className);\r\n    const comboClass = css(\r\n        'combo', {'error': props.error}\r\n    );\r\n    const arrowClassName = css(\r\n        'arrow', 'icon icon-chevronDown4Legacy'\r\n    );\r\n\r\n    let value = -1;\r\n    let options = props.options.map((opt, index) => {\r\n        if (opt.value === props.value) {\r\n            value = index;\r\n        }\r\n        return (\r\n            <Attr.option\r\n                value={index}\r\n                key={index}\r\n                disabled={opt.disabled}\r\n                hidden={opt.hidden}\r\n                className={css({'option-hidden': !!opt.hidden})}\r\n                attr={mergeAttributes(props.attr.option, opt.attr)}\r\n            >\r\n                {opt.label}\r\n            </Attr.option>\r\n        );\r\n    });\r\n\r\n    const onChange = (event) => {\r\n        const index = parseInt(event.target.value);\r\n        const value = props.options[index].value;\r\n        props.onChange(value);\r\n    };\r\n\r\n    return (\r\n        <Attr.div className={containerClass} attr={props.attr.container}>\r\n            <Attr.select \r\n                name={props.name}\r\n                value={value}\r\n                className={comboClass}\r\n                onChange={onChange}\r\n                disabled={props.disabled}\r\n                autoFocus={props.autoFocus}\r\n                methodRef={props.autoFocus && autoFocusRef}\r\n                required={props.required}\r\n                attr={props.attr.select}\r\n            >\r\n                {options}\r\n            </Attr.select>\r\n            <Attr.span className={arrowClassName} attr={props.attr.chevron}/>\r\n        </Attr.div>\r\n    );\r\n};\r\n\r\nSelectInput.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    onChange: undefined,\r\n    options: undefined,\r\n    attr: {\r\n        container: {},\r\n        select: {},\r\n        option: {},\r\n        chevron: {},\r\n    }\r\n};\r\n\r\nexport default SelectInput;\r\n"]}