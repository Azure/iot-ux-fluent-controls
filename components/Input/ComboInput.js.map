{"version":3,"sources":["src/method/components/Input/ComboInput.tsx"],"names":[],"mappings":"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","file":"ComboInput.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport { DivProps, ButtonProps, SpanProps, InputProps, Elements as Attr, OptionAttr, mergeAttributes, mergeAttributeObjects } from '../../Attributes';\r\nimport { Icon, IconSize } from '../Icon';\r\nimport { Dropdown, DropdownAttributes } from '../Dropdown';\r\nimport { MethodNode, FormOption, keyCode, hasClassName, autoFocusRef } from '../../Common';\r\nconst css = classNames.bind(require('./ComboInput.scss'));\r\n\r\nexport interface ComboInputType { }\r\n\r\nexport interface ComboInputAttributes extends DropdownAttributes {\r\n    textbox?: DivProps;\r\n    input?: InputProps;\r\n    clearButton?: ButtonProps;\r\n    chevron?: SpanProps;\r\n    option?: ButtonProps;\r\n}\r\n\r\nexport interface ComboInputProps extends React.Props<ComboInputType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML input element */\r\n    value: string | any;\r\n    /** HTML input element placeholder */\r\n    placeholder?: string;\r\n\r\n    /**\r\n     * List of HTML select element options in the format:\r\n     *\r\n     * `{\r\n     *     label: string,\r\n     *     value: any,\r\n     *     disabled: boolean,\r\n     *     hidden: boolean\r\n     * }`\r\n     */\r\n    options: (FormOption & OptionAttr<ButtonProps>)[];\r\n\r\n    /**\r\n     * Callback used to map FormOption to strings to be used by default\r\n     * optionFilter and optionSelect callbacks\r\n     *\r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionMap?: (option: FormOption) => string;\r\n    /**\r\n     * Callback used to filter list of FormOptions for display in the dropdown\r\n     *\r\n     * This function can, for example, implement autocomplete by hiding\r\n     * any option that does not contain the value in the text input\r\n     *\r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionFilter?: (newValue: string, option: FormOption) => boolean;\r\n    /**\r\n     * Callback used to decide whether a FormOption is selected or not\r\n     *\r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionSelect?: (newValue: string, option: FormOption) => boolean;\r\n    /**\r\n     * Callback used to generate a React node to use as the label in dropdown\r\n     *\r\n     * This function can, for example, bold any relevant fragments of text for\r\n     * highlighting in autocomplete\r\n     *\r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionLabel?: (newValue: string, option: FormOption) => MethodNode;\r\n\r\n    /** Apply error styling to input element */\r\n    error?: boolean;\r\n    /** Add required attribute to HTML input element */\r\n    required?: boolean;\r\n    /** Disable HTML input element and apply disabled styling */\r\n    disabled?: boolean;\r\n    /** Read only HTML input element */\r\n    readOnly?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n    /**\r\n     * Show label instead of FormOption value in ComboInput text box when a\r\n     * value from the FormOptions is selected\r\n     *\r\n     * Since the ComboInput has a text input, it cannot draw an arbitrary\r\n     * MethodNode as the textbox value. If props.optionLabel returns a string,\r\n     * then you can show the label text in the textbox instead of the option\r\n     * value itself.\r\n     *\r\n     * Note: If the label and value are different and showLabel is true,\r\n     * when the user starts typing after making a selection in the dropdown,\r\n     * it will not reselect the option unless optionSelect checks the label\r\n     * string as well as the value.\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * optionSelect = (newValue, option) => {\r\n     *     return newValue === option.value || newValue === option.label.toString();\r\n     * }\r\n     * ```\r\n     *\r\n     * Default: true\r\n     */\r\n    showLabel?: boolean;\r\n\r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: string | FormOption) => void;\r\n\r\n    /** Class to append to top level element */\r\n    className?: string;\r\n    /** Class to append to HTML Input element */\r\n    inputClassName?: string;\r\n    /** Class to append to top level dropdown element */\r\n    dropdownClassName?: string;\r\n\r\n    attr?: ComboInputAttributes;\r\n}\r\n\r\nexport interface ComboInputState {\r\n    visible: boolean;\r\n    hovered: FormOption;\r\n}\r\n\r\nconst defaultMap = (option: FormOption) => {\r\n    if (typeof (option.value) === 'string') {\r\n        return option.value;\r\n    }\r\n    if (DEBUG) {\r\n        console.error('METHOD ERROR: The default ComboInput map function expects FormOption.value to be a string');\r\n    }\r\n\r\n    return '';\r\n};\r\n\r\nconst defaultFilter = (newValue: string, option: FormOption) => !option.hidden;\r\n\r\nconst defaultSelect = (newValue: string, option: string) => option === newValue;\r\n\r\nconst defaultLabel = (newValue: string, option: FormOption) => option.label;\r\n\r\n/**\r\n * Low level combo input control\r\n *\r\n * `ComboInput` is a hybrid of the SelectInput and TextInput controls. It\r\n * functions as a 'new or existing' text field where the user can type in a\r\n * custom value or pick from a list of values provided by the control.\r\n *\r\n * `ComboInput` consumes the property `options: FormOption[]` which specify\r\n * each option's `value` and `label`. The former can be any object while the\r\n * latter can be any React node (or a string). `ComboInput` also consumes a\r\n * `value: string | FormOption` property that sets the current value of the\r\n * `ComboInput` text field. If `value` is a `string`, the user is typing in a\r\n * custom value and if it is an object, the user has either typed in a value\r\n * equal to one of the options or has selected an option from the dropdown list.\r\n *\r\n * In this example of a default `ComboInput`, `FormOption.value` must be a\r\n * string, which allows you to use `ComboInput` with only the properties `name`,\r\n * `value`, `onChange`, and `options`. When the user types in 'Option 1', that\r\n * option will be considered selected instead of a custom object.\r\n *\r\n * *Reffer to the other examples on how to use `ComboInput`'s callbacks to\r\n * further modify what options display in the dropdown.*\r\n *\r\n * (Use the `ComboField` control for forms with standard styling)\r\n */\r\nexport class ComboInput extends React.Component<ComboInputProps, Partial<ComboInputState>> {\r\n    static defaultProps = {\r\n        optionMap: defaultMap,\r\n        optionLabel: defaultLabel,\r\n        showLabel: true,\r\n        attr: {\r\n            container: {},\r\n            textbox: {},\r\n            input: {},\r\n            clearButton: {},\r\n            chevron: {},\r\n            dropdown: {},\r\n            option: {},\r\n        }\r\n    };\r\n\r\n    inputElement: HTMLInputElement;\r\n    optionFilter: (newValue: string, option: FormOption) => boolean;\r\n    optionSelect: (newValue: string, option: FormOption) => boolean;\r\n\r\n    private optionElements: { [value: string]: HTMLSpanElement };\r\n    private currentOption: string;\r\n\r\n    constructor(props: ComboInputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            visible: false,\r\n            hovered: null\r\n        };\r\n\r\n        const map = props.optionMap;\r\n        this.inputElement = null;\r\n        this.optionFilter = !!props.optionFilter ? props.optionFilter\r\n            : defaultFilter;\r\n        this.optionSelect = !!props.optionSelect ? props.optionSelect\r\n            : (newValue, option) => defaultSelect(newValue, map(option));\r\n\r\n        this.optionElements = {};\r\n        this.currentOption = null;\r\n    }\r\n\r\n    inputRef = (input: HTMLInputElement) => {\r\n        this.inputElement = input;\r\n        if (this.props.autoFocus) {\r\n            autoFocusRef(this.inputElement);\r\n        }\r\n    }\r\n\r\n    onFocus(event) {\r\n        this.showDropdown();\r\n    }\r\n\r\n    onKeyDown(event) {\r\n        /** So that we don't block any browser shortcuts */\r\n        if (event.ctrlKey || event.altKey) {\r\n            return;\r\n        }\r\n\r\n        const options = this.getVisibleOptions().filter(\r\n            option => !option.hidden && !option.disabled\r\n        ).map(option => option.value);\r\n        if (options.length > 0) {\r\n            switch (event.keyCode) {\r\n                case keyCode.down:\r\n                    if (this.currentOption) {\r\n                        const currentOption = options.indexOf(this.currentOption);\r\n                        const index = currentOption > -1 ? currentOption : options.length - 1;\r\n                        const newValue = index === options.length - 1\r\n                            ? options[0]\r\n                            : options[index + 1];\r\n                        this.setSelection(newValue);\r\n                    } else {\r\n                        this.setSelection(options[0]);\r\n                    }\r\n                    break;\r\n                case keyCode.up:\r\n                    if (this.currentOption) {\r\n                        const currentOption = options.indexOf(this.currentOption);\r\n                        const index = currentOption > -1 ? currentOption : 0;\r\n                        const newValue = index === 0\r\n                            ? options[options.length - 1]\r\n                            : options[index - 1];\r\n                        this.setSelection(newValue);\r\n                    } else {\r\n                        this.setSelection(options[0]);\r\n                    }\r\n                    break;\r\n                case keyCode.enter:\r\n                    if (this.state.visible && this.currentOption) {\r\n                        this.props.onChange(this.currentOption);\r\n                        this.hideDropdown();\r\n                    } else {\r\n                        this.showDropdown();\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    getValue(): string {\r\n        if (typeof (this.props.value) === 'string') {\r\n            return this.props.value;\r\n        } else {\r\n            let result = null;\r\n            this.props.options.forEach(option => {\r\n                if (option.value === this.props.value) {\r\n                    result = option;\r\n                }\r\n            });\r\n\r\n            if (result) {\r\n                return this.props.optionMap(result);\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    getVisibleOptions(getDisabled: boolean = true): (FormOption & OptionAttr<ButtonProps>)[] {\r\n        let filter = option => !option.hidden;\r\n        if (typeof (this.props.value) === 'string') {\r\n            filter = option => {\r\n                return this.optionFilter(\r\n                    this.getValue(),\r\n                    option\r\n                );\r\n            };\r\n        }\r\n        const results = this.props.options.filter(filter);\r\n        return getDisabled ? results : results.filter(option => !option.disabled);\r\n    }\r\n\r\n    onInputChange(event) {\r\n        const newValue = event.target.value;\r\n        const options = this.getVisibleOptions();\r\n        const result = options.filter(option => this.optionSelect(newValue, option));\r\n        if (result.length > 0) {\r\n            this.props.onChange(result[0].value);\r\n        } else {\r\n            this.props.onChange(newValue);\r\n        }\r\n    }\r\n\r\n    showDropdown() {\r\n        this.setState({ visible: true });\r\n    }\r\n\r\n    hideDropdown() {\r\n        this.setState({ visible: false, hovered: null });\r\n    }\r\n\r\n    clearSelection(option: string) {\r\n        /**\r\n         * See setSelection(option) below for an explanation of why this is done\r\n         * instead of using render() and state\r\n         */\r\n        if (option && this.optionElements[option]) {\r\n            const element = this.optionElements[option];\r\n            const options = this.getVisibleOptions();\r\n            const index = options.map(option => option.value).indexOf(option);\r\n            const className = this.props.attr.option && this.props.attr.option.className\r\n                ? this.props.attr.option.className : '';\r\n\r\n            if (index > -1) {\r\n                element.className = css('option', className,\r\n                    options[index].attr && options[index].attr.className\r\n                        ? options[index].attr.className : ''\r\n                );\r\n            } else {\r\n                element.className = css('option', className);\r\n            }\r\n        }\r\n    }\r\n\r\n    setSelection(option: string) {\r\n        /**\r\n         * This sets the background and text color for options in the dropdown\r\n         * when the user hovers over the option or presses up/down in the input\r\n         *\r\n         * Since the ComboInput dropdown DOM is moved around to draw on top of\r\n         * all other elements, rerendering each time the user hovers over an option\r\n         * or changes which option is selected with the arrow keys causes the dropdown\r\n         * to be moved back into its regular DOM position, rerendered, and moved back\r\n         * on top of all other elements. This creates a huge performance problem in\r\n         * Edge that prevents the ComboInput from registering clicks and resets scroll\r\n         * position in every other browser. Setting the hover class directly on the DOM\r\n         * as we do here allows us to render only when the value changes or the dropdown\r\n         * is opened/closed.\r\n         */\r\n        this.clearSelection(this.currentOption);\r\n        if (option && this.optionElements[option]) {\r\n            const element = this.optionElements[option];\r\n            const options = this.getVisibleOptions();\r\n            const index = options.map(option => option.value).indexOf(option);\r\n            const className = this.props.attr.option && this.props.attr.option.className\r\n                ? this.props.attr.option.className : '';\r\n\r\n            if (index > -1) {\r\n                element.className = css('option', 'hover', className,\r\n                    options[index].attr && options[index].attr.className\r\n                        ? options[index].attr.className : ''\r\n                );\r\n            } else {\r\n                element.className = css('option', 'hover', className);\r\n            }\r\n        }\r\n        this.currentOption = option;\r\n    }\r\n\r\n    render() {\r\n        const containerClassName = css('combo-input-container', this.props.className);\r\n        const inputClassName = css({\r\n            'input': true,\r\n            'error': this.props.error,\r\n            'visible': this.state.visible,\r\n            'show-cancel': this.state.visible && this.props.value\r\n        }, this.props.inputClassName);\r\n\r\n        let inputValue = '';\r\n        const value = this.getValue();\r\n        let result = null;\r\n        const visibleOptions = this.getVisibleOptions();\r\n        const options = visibleOptions.map((option, index) => {\r\n            const checkLabel = this.props.showLabel\r\n                ? this.props.optionLabel(value, option).toString === this.props.value\r\n                : false;\r\n            if (option.value === this.props.value || checkLabel) {\r\n                result = option;\r\n            }\r\n\r\n            const optionClassName = css('option', {\r\n                'selected': this.optionSelect(value, option),\r\n                'disabled': option.disabled\r\n            });\r\n\r\n            return (\r\n                <Attr.button\r\n                    type='button'\r\n                    className={optionClassName}\r\n                    onClick={option.disabled ? undefined : (event) => {\r\n                        this.props.onChange(option.value);\r\n                        this.hideDropdown();\r\n                        this.inputElement.blur();\r\n                    }}\r\n                    onMouseEnter={(event) => {\r\n                        this.setSelection(option.value);\r\n                    }}\r\n                    onMouseLeave={(event) => {\r\n                        this.setSelection(null);\r\n                    }}\r\n                    tabIndex={-1}\r\n                    key={index}\r\n                    methodRef={(element) => {\r\n                        if (element) {\r\n                            this.optionElements[option.value] = element;\r\n                        }\r\n                    }}\r\n                    attr={mergeAttributes(this.props.attr.option, option.attr)}\r\n                >\r\n                    {this.props.optionLabel(value, option)}\r\n                </Attr.button>\r\n            );\r\n        });\r\n\r\n        if (result) {\r\n            inputValue = this.props.showLabel\r\n                ? this.props.optionLabel(value, result).toString()\r\n                : value;\r\n        } else {\r\n            if (typeof (this.props.value) === 'string') {\r\n                inputValue = this.props.value;\r\n            }\r\n        }\r\n\r\n        const clearButton = this.props.disabled ? '' :\r\n            <Attr.button\r\n                type='button'\r\n                className={css('cancel', 'icon icon-cancel')}\r\n                onClick={() => {\r\n                    this.inputElement.focus();\r\n                    this.props.onChange('');\r\n                }}\r\n                tabIndex={-1}\r\n                attr={this.props.attr.clearButton}\r\n            />;\r\n\r\n        const dropdown = this.props.options && this.props.options.length > 0\r\n            && <Attr.div\r\n                className={this.props.dropdownClassName}\r\n                attr={this.props.attr.dropdown}\r\n            >\r\n                {options}\r\n            </Attr.div>;\r\n\r\n        const validOptions = visibleOptions.filter(option => !option.disabled);\r\n\r\n        return (\r\n            <Dropdown\r\n                dropdown={dropdown}\r\n                visible={validOptions.length > 0 && this.state.visible}\r\n                className={containerClassName}\r\n                /**\r\n                * This is empty on purpose. When onMouseEnter/Leave is set,\r\n                * the dropdown starts to accept pointer events needed for\r\n                * interactive dropdowns\r\n                */\r\n                onMouseEnter={() => { }}\r\n                outerEvents={['click', 'focusin']}\r\n                onOuterEvent={(event) => this.setState({ visible: false })}\r\n                attr={mergeAttributeObjects(\r\n                    this.props.attr,\r\n                    {\r\n                        dropdown: {\r\n                            className: css('dropdown')\r\n                        },\r\n                    },\r\n                    ['container', 'dropdownContainer', 'dropdown']\r\n                )}\r\n            >\r\n                <Attr.div\r\n                    className={css('input-container')}\r\n                    attr={this.props.attr.textbox}\r\n                >\r\n                    <Attr.input\r\n                        type='text'\r\n                        autoComplete='off'\r\n                        name={this.props.name}\r\n                        value={inputValue}\r\n                        className={inputClassName}\r\n                        onChange={event => this.onInputChange(event)}\r\n                        placeholder={this.props.placeholder}\r\n                        onFocus={event => this.onFocus(event)}\r\n                        onKeyDown={event => this.onKeyDown(event)}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                        readOnly={this.props.readOnly}\r\n                        methodRef={this.inputRef}\r\n                        autoFocus={this.props.autoFocus}\r\n                        attr={this.props.attr.input}\r\n                    />\r\n                    {clearButton}\r\n                    <Attr.span\r\n                        className={css('chevron', 'icon icon-chevronDown')}\r\n                        attr={this.props.attr.chevron}\r\n                    />\r\n                </Attr.div>\r\n            </Dropdown>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComboInput;\r\n"]}