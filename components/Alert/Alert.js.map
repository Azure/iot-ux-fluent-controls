{"version":3,"sources":["src/method/components/Alert/Alert.tsx"],"names":[],"mappings":"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","file":"Alert.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {DivProps, Elements as Attr} from '../../Attributes';\r\nimport {Icon, IconSize, IconAttributes} from '../Icon';\r\nconst css = classNames.bind(require('./Alert.scss'));\r\n\r\nexport enum AlertType {\r\n    Information,\r\n    Warning,\r\n    Error\r\n}\r\n\r\nexport interface AlertComponentType {}\r\n\r\nexport interface AlertAttributes {\r\n    container?: DivProps;\r\n    icon?: IconAttributes;\r\n    contents?: DivProps;\r\n    closeIcon?: IconAttributes;\r\n}\r\n\r\nexport interface AlertProps extends React.Props<AlertComponentType> {\r\n    /** Icon name (from Segoe UI MDL font) */\r\n    icon?: string;\r\n    /**\r\n     * Alert type described using `AlertType` enum\r\n     * \r\n     * (`AlertType.[Information | Warning | Error]`)\r\n     */\r\n    type?: AlertType;\r\n    \r\n    /** \r\n     * Callback for close button\r\n     * \r\n     * (If empty, the close button is not displayed)\r\n     */    \r\n    onClose?: () => void;\r\n    \r\n    /** Fixed width (284 pixels) */\r\n    fixed?: boolean;\r\n    /**\r\n     * Alert displays multiple lines\r\n     * \r\n     * (By default, alerts only show one line with ellipsis overflow)\r\n     */\r\n    multiline?: boolean;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n\r\n    attr?: AlertAttributes;\r\n}\r\n\r\n/**\r\n * Alert showing Information, Warning, or Error with text, icon, and optional close button\r\n * \r\n * @param props Control properties (defined in `AlertProps` interface)\r\n */\r\nexport const Alert: React.StatelessComponent<AlertProps> = (props: AlertProps) => {\r\n    const className = css({\r\n        'alert-container': true,\r\n        'alert-info': props.type === AlertType.Information,\r\n        'alert-warning': props.type === AlertType.Warning,\r\n        'alert-error': props.type === AlertType.Error,\r\n        'alert-multiline': props.multiline,\r\n        'alert-fixed': !!props.fixed\r\n    }, props.className);\r\n\r\n    let iconName = props.icon;\r\n    if (!props.icon) {\r\n        if (props.type === AlertType.Information) {\r\n            iconName = 'info';\r\n        } else if (props.type === AlertType.Warning) {\r\n            iconName = 'warning';\r\n        } else if (props.type === AlertType.Error) {\r\n            iconName = 'error';\r\n        }\r\n    }\r\n\r\n    const iconClassName = css('alert-icon');\r\n    const icon = <Icon\r\n        className={iconClassName} \r\n        size={IconSize.xsmall}\r\n        icon={iconName}\r\n        attr={props.attr.icon}\r\n    />;\r\n\r\n    const textClassName = css('alert-text');\r\n    const text = (\r\n        <Attr.div\r\n            className={textClassName}\r\n            attr={props.attr.contents}\r\n        >\r\n            {props.children}\r\n        </Attr.div>\r\n    );\r\n\r\n    let close;\r\n    if (props.onClose) {\r\n        const closeClassName = css('alert-close');\r\n        const closeProps = {\r\n            ...props.attr.closeIcon,\r\n            container: {onClick: props.onClose}\r\n        };\r\n        close = (\r\n            <Icon \r\n                className={closeClassName} \r\n                size={IconSize.xsmall}\r\n                icon='cancelLegacy'\r\n                attr={closeProps}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Attr.div className={className} attr={props.attr.container}>\r\n            {icon}\r\n            {text}\r\n            {close}\r\n        </Attr.div>\r\n    );\r\n};\r\n\r\nAlert.defaultProps = {\r\n    type: AlertType.Information,\r\n    attr: {\r\n        container: {},\r\n        icon: {},\r\n        contents: {},\r\n        closeIcon: {},\r\n    }\r\n};\r\n\r\nexport default Alert;\r\n"]}