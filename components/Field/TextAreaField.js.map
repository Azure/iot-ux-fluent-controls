{"version":3,"sources":["src/method/components/Field/TextAreaField.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAE9C,gDAA+D;AAC/D,2CAA2D;AAC3D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AA2CrD;;;;GAIG;AACU,QAAA,aAAa,GAAiD,CAAC,KAAyB,EAAE,EAAE;IACrG,MAAM,CAAC,CACH,oBAAC,qBAAS,IACN,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB,oBAAC,mBAAQ,IACL,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,WAAW,EAAE,KAAK,CAAC,WAAW,EAC9B,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,EACpB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,KAAK,CAAC,IAAI,GAClB,CACM,CACf,CAAC;AACN,CAAC,CAAC;AAEF,qBAAa,CAAC,YAAY,GAAG;IACzB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,IAAI,EAAE;QACF,cAAc,EAAE,EAAE;QAClB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;QACb,QAAQ,EAAE,EAAE;QACZ,GAAG,EAAE,EAAE;KACV;CACJ,CAAC;AAEF,kBAAe,qBAAa,CAAC","file":"TextAreaField.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {MethodNode} from '../../Common';\r\nimport {TextArea, TextAreaAttributes} from '../Input/TextArea';\r\nimport {FormField, FormFieldAttributes} from './FormField';\r\nconst css = classNames.bind(require('./Field.scss'));\r\n\r\nexport interface TextAreaFieldType {}\r\n\r\nexport interface TextAreaFieldProps extends React.Props<TextAreaFieldType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML textarea element */\r\n    value: string;\r\n    /** HTML textarea element placeholder */\r\n    placeholder?: string;\r\n\r\n    /** Label to display above textarea element */\r\n    label: MethodNode;\r\n    /** Error to display below textarea element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n\r\n    /** Grow text area to fit user text */\r\n    autogrow?: boolean;\r\n    /** Disable HTML textarea element */\r\n    disabled?: boolean;\r\n    /** Read only HTML input element */\r\n    readOnly?: boolean;\r\n    /** Form field is required (appends a red asterisk to the label) */\r\n    required?: boolean;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n\r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: string) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level element of TextArea */\r\n    inputClassName?: string;\r\n\r\n    attr?: TextAreaAttributes & FormFieldAttributes;\r\n}\r\n\r\n/**\r\n * High level form text field\r\n * \r\n * @param props Control properties (defined in `TextAreaFieldProps` interface)\r\n */\r\nexport const TextAreaField: React.StatelessComponent<TextAreaFieldProps> = (props: TextAreaFieldProps) => {\r\n    return (\r\n        <FormField\r\n            name={props.name}\r\n            label={props.label}\r\n            error={props.error}\r\n            errorTitle={props.errorTitle}\r\n            loading={props.loading}\r\n            required={props.required}\r\n            className={props.className}\r\n            attr={props.attr}\r\n        >\r\n            <TextArea\r\n                name={props.name}\r\n                value={props.value}\r\n                placeholder={props.placeholder}\r\n                error={!!props.error}\r\n                disabled={props.disabled}\r\n                readOnly={props.readOnly}\r\n                onChange={props.onChange}\r\n                className={props.inputClassName}\r\n                autogrow={props.autogrow}\r\n                autoFocus={props.autoFocus}\r\n                required={props.required}\r\n                attr={props.attr}\r\n            />\r\n        </FormField>\r\n    );\r\n};\r\n\r\nTextAreaField.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    label: undefined,\r\n    onChange: undefined,\r\n    attr: {\r\n        fieldContainer: {},\r\n        fieldLabel: {},\r\n        fieldContent: {},\r\n        fieldError: {},\r\n        container: {},\r\n        textarea: {},\r\n        pre: {}\r\n    }\r\n};\r\n\r\nexport default TextAreaField;\r\n"]}