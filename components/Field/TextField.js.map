{"version":3,"sources":["src/method/components/Field/TextField.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAG9C,kDAAkE;AAClE,2CAA2D;AAC3D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AAwDrD;;;;GAIG;AACU,QAAA,SAAS,GAA6C,CAAC,KAAqB,EAAE,EAAE;IACzF,MAAM,CAAC,CACH,oBAAC,qBAAS,IACN,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB,oBAAC,qBAAS,IACN,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,WAAW,EAAE,KAAK,CAAC,WAAW,EAC9B,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,MAAM,EAAE,KAAK,CAAC,MAAM,EACpB,eAAe,EAAE,KAAK,CAAC,eAAe,EACtC,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,EACxC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,EACpB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,KAAK,CAAC,IAAI,GAClB,CACM,CACf,CAAC;AACN,CAAC,CAAC;AAEF,iBAAS,CAAC,YAAY,GAAG;IACrB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE;QACF,cAAc,EAAE,EAAE;QAClB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,EAAE;QACT,cAAc,EAAE,EAAE;QAClB,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,EAAE;QACX,WAAW,EAAE,EAAE;KAClB;CACJ,CAAC;AAEF,kBAAe,iBAAS,CAAC","file":"TextField.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {MethodNode} from '../../Common';\r\nimport {Icon, IconSize, IconBackground} from '../Icon';\r\nimport {TextInput, TextInputAttributes} from '../Input/TextInput';\r\nimport {FormField, FormFieldAttributes} from './FormField';\r\nconst css = classNames.bind(require('./Field.scss'));\r\n\r\nexport interface TextFieldType {}\r\n\r\nexport interface TextFieldProps extends React.Props<TextFieldType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML input element */\r\n    value: string;\r\n    /** HTML input element placeholder */\r\n    placeholder?: string;\r\n    /**\r\n     * HTML input element type \r\n     * \r\n     * Default: text\r\n     */\r\n    type?: string;\r\n    \r\n    /** Label to display above input element */\r\n    label: MethodNode;\r\n    /** Error to display below input element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n\r\n    /** Node to draw to the left of the input box */\r\n    prefix?: MethodNode;\r\n    /** Class to append to prefix container */\r\n    prefixClassName?: string;\r\n    /** Node to draw to the right of the input box */\r\n    postfix?: MethodNode;\r\n    /** Class to append to postfix container */\r\n    postfixClassName?: string;\r\n    \r\n    /** Disable HTML input element */\r\n    disabled?: boolean;\r\n    /** Read only HTML input element */\r\n    readOnly?: boolean;\r\n    /** Form field is required (appends a red asterisk to the label) */\r\n    required?: boolean;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n    \r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: string) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level element of TextInput */\r\n    inputClassName?: string;\r\n\r\n    attr?: TextInputAttributes & FormFieldAttributes;\r\n}\r\n\r\n/**\r\n * High level form text field\r\n * \r\n * @param props Control properties (defined in `TextFieldProps` interface)\r\n */\r\nexport const TextField: React.StatelessComponent<TextFieldProps> = (props: TextFieldProps) => {\r\n    return (\r\n        <FormField\r\n            name={props.name}\r\n            label={props.label}\r\n            error={props.error}\r\n            errorTitle={props.errorTitle}\r\n            loading={props.loading}\r\n            required={props.required}\r\n            className={props.className}\r\n            attr={props.attr}\r\n        >\r\n            <TextInput\r\n                name={props.name}\r\n                value={props.value}\r\n                placeholder={props.placeholder}\r\n                type={props.type}\r\n                prefix={props.prefix}\r\n                prefixClassName={props.prefixClassName}\r\n                postfix={props.postfix}\r\n                postfixClassName={props.postfixClassName}\r\n                error={!!props.error}\r\n                disabled={props.disabled}\r\n                readOnly={props.readOnly}\r\n                onChange={props.onChange}\r\n                className={props.inputClassName}\r\n                autoFocus={props.autoFocus}\r\n                required={props.required}\r\n                attr={props.attr}\r\n            />\r\n        </FormField>\r\n    );\r\n};\r\n\r\nTextField.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    label: undefined,\r\n    onChange: undefined,\r\n    type: 'text',\r\n    attr: {\r\n        fieldContainer: {},\r\n        fieldLabel: {},\r\n        fieldContent: {},\r\n        fieldError: {},\r\n        container: {},\r\n        input: {},\r\n        inputContainer: {},\r\n        prefix: {},\r\n        postfix: {},\r\n        clearButton: {},\r\n    }\r\n};\r\n\r\nexport default TextField;\r\n"]}