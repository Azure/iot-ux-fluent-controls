{"version":3,"sources":["src/method/components/Field/CheckboxField.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAE9C,0DAA8E;AAC9E,2CAA2D;AAC3D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AAyCrD;;;;;;;;;GASG;AACU,QAAA,aAAa,GAAiD,CAAC,KAAyB,EAAE,EAAE;IACrG,MAAM,CAAC,CACH,oBAAC,qBAAS,IACN,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB;YACI,oBAAC,6BAAa,IACV,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,OAAO,EAAE,KAAK,CAAC,KAAK,EACpB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,KAAK,CAAC,IAAI,GAClB,CACA,CACE,CACf,CAAC;AACN,CAAC,CAAC;AAEF,qBAAa,CAAC,YAAY,GAAG;IACzB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,IAAI,EAAE;QACF,cAAc,EAAE,EAAE;QAClB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,EAAE;QACT,KAAK,EAAE,EAAE;QACT,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE,EAAE;QACZ,iBAAiB,EAAE,EAAE;QACrB,aAAa,EAAE,EAAE;QACjB,MAAM,EAAE,EAAE;KACb;CACJ,CAAC;AAGF,kBAAe,qBAAa,CAAC","file":"CheckboxField.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {MethodNode} from '../../Common';\r\nimport {CheckboxInput, CheckboxInputAttributes} from '../Input/CheckboxInput';\r\nimport {FormField, FormFieldAttributes} from './FormField';\r\nconst css = classNames.bind(require('./Field.scss'));\r\n\r\nexport interface CheckboxFieldType {}\r\n\r\nexport interface CheckboxFieldProps extends React.Props<CheckboxFieldType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** \r\n     * Current value of HTML checkbox element\r\n     * \r\n     * This must be an `Object` that is in `CheckboxFieldProps.options`\r\n     */\r\n    value: boolean;\r\n    \r\n    /** Label to display above input element */\r\n    label: MethodNode;\r\n    /** Error to display below input element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n    \r\n    /** Disable HTML input element */\r\n    disabled?: boolean;\r\n    /** Form field is required (appends a red asterisk to the label) */\r\n    required?: boolean;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n\r\n    /** Callback for HTML checkbox element `onChange` events */\r\n    onChange: (newValue: boolean) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level element of CheckboxInput */\r\n    inputClassName?: string;\r\n\r\n    attr?: FormFieldAttributes & CheckboxInputAttributes;\r\n}\r\n\r\n/**\r\n * High level form checkbox control\r\n * \r\n * IMPORTANT: The options provided to this control must all be UNIQUE. The\r\n * `value` property of checkboxes is the numerical index of the option in\r\n * `CheckboxField.options` so `CheckboxField.value` is compared to each value in\r\n * `options` (===) to decide which option is the one currently selected.\r\n * \r\n * @param props: Object fulfilling `CheckboxFieldProps` interface\r\n */\r\nexport const CheckboxField: React.StatelessComponent<CheckboxFieldProps> = (props: CheckboxFieldProps) => {\r\n    return (\r\n        <FormField\r\n            name={props.name}\r\n            label={props.label}\r\n            error={props.error}\r\n            errorTitle={props.errorTitle}\r\n            loading={props.loading}\r\n            required={props.required}\r\n            className={props.className}\r\n            attr={props.attr}\r\n        >\r\n            <div>\r\n                <CheckboxInput\r\n                    name={props.name}\r\n                    checked={props.value}\r\n                    label={props.label}\r\n                    disabled={props.disabled}\r\n                    onChange={props.onChange}\r\n                    className={props.inputClassName}\r\n                    autoFocus={props.autoFocus}\r\n                    required={props.required}\r\n                    attr={props.attr}\r\n                />\r\n            </div>\r\n        </FormField>\r\n    );\r\n};\r\n\r\nCheckboxField.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    label: undefined,\r\n    onChange: undefined,\r\n    attr: {\r\n        fieldContainer: {},\r\n        fieldLabel: {},\r\n        fieldContent: {},\r\n        fieldError: {},\r\n        container: {},\r\n        label: {},\r\n        input: {},\r\n        text: {},\r\n        checkbox: {},\r\n        indeterminateFill: {},\r\n        checkmarkIcon: {},\r\n        border: {},\r\n    }\r\n};\r\n\r\n\r\nexport default CheckboxField;\r\n"]}