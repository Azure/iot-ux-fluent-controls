{"version":3,"sources":["src/method/components/Field/SelectField.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAG9C,sDAAwE;AACxE,2CAA2D;AAC3D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AAkDrD;;;;;;;;;GASG;AACU,QAAA,WAAW,GAA+C,CAAC,KAAuB,EAAE,EAAE;IAC/F,MAAM,CAAC,CACH,oBAAC,qBAAS,IACN,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB,oBAAC,yBAAW,IACR,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,EACpB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,KAAK,CAAC,IAAI,GAClB,CACM,CACf,CAAC;AACN,CAAC,CAAC;AAEF,mBAAW,CAAC,YAAY,GAAG;IACvB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE;QACF,cAAc,EAAE,EAAE;QAClB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;QACb,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,EAAE;KACd;CACJ,CAAC;AAEF,kBAAe,mBAAW,CAAC","file":"SelectField.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {OptionAttr, OptionProps} from '../../Attributes';\r\nimport {MethodNode, FormOption} from '../../Common';\r\nimport {SelectInput, SelectInputAttributes} from '../Input/SelectInput';\r\nimport {FormField, FormFieldAttributes} from './FormField';\r\nconst css = classNames.bind(require('./Field.scss'));\r\n\r\nexport interface SelectFieldType {}\r\n\r\nexport interface SelectFieldProps extends React.Props<SelectFieldType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** \r\n     * Current value of HTML select element\r\n     * \r\n     * This must be an `Object` that is in `SelectInputProps.options`\r\n     */\r\n    value: any;\r\n    /** \r\n     * List of HTML select element options in the format:\r\n     * \r\n     * `{\r\n     *     label: string,\r\n     *     value: any\r\n     * }`\r\n     */\r\n    options: (FormOption & OptionAttr<OptionProps>)[];\r\n    \r\n    /** Label to display above input element */\r\n    label: MethodNode;\r\n    /** Error to display below input element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n    \r\n    /** Disable HTML input element */\r\n    disabled?: boolean;\r\n    /** Form field is required (appends a red asterisk to the label) */\r\n    required?: boolean;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;   \r\n\r\n    /** Callback for HTML select element `onChange` events */\r\n    onChange: (newValue: any) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level element of SelectInput */\r\n    inputClassName?: string;\r\n\r\n    attr?: SelectInputAttributes & FormFieldAttributes;\r\n}\r\n\r\n/**\r\n * High level form select box control\r\n * \r\n * IMPORTANT: The options provided to this control must all be UNIQUE. The \r\n * `value` property of option tags is the numerical index of the option in\r\n * `SelectField.options` so `SelectField.value` is compared to each value in\r\n * `options` (===) to decide which option is the one currently selected.\r\n * \r\n * @param props: Object fulfilling `SelectFieldProps` interface\r\n */\r\nexport const SelectField: React.StatelessComponent<SelectFieldProps> = (props: SelectFieldProps) => {\r\n    return (\r\n        <FormField\r\n            name={props.name}\r\n            label={props.label}\r\n            error={props.error}\r\n            errorTitle={props.errorTitle}\r\n            loading={props.loading}\r\n            required={props.required}\r\n            className={props.className}\r\n            attr={props.attr}\r\n        >\r\n            <SelectInput\r\n                name={props.name}\r\n                value={props.value}\r\n                options={props.options}\r\n                error={!!props.error}\r\n                disabled={props.disabled}\r\n                onChange={props.onChange}\r\n                className={props.inputClassName}\r\n                autoFocus={props.autoFocus}\r\n                required={props.required}\r\n                attr={props.attr}\r\n            />\r\n        </FormField>\r\n    );\r\n};\r\n\r\nSelectField.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    label: undefined,\r\n    onChange: undefined,\r\n    options: undefined,\r\n    attr: {\r\n        fieldContainer: {},\r\n        fieldLabel: {},\r\n        fieldContent: {},\r\n        fieldError: {},\r\n        container: {},\r\n        select: {},\r\n        option: {},\r\n        chevron: {},\r\n    }\r\n};\r\n\r\nexport default SelectField;\r\n"]}