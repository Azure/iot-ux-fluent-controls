{"version":3,"sources":["src/method/components/Field/ComboField.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAG9C,oDAAqE;AACrE,2CAA2D;AAC3D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AA6GrD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACU,QAAA,UAAU,GAA8C,CAAC,KAAsB,EAAE,EAAE;IAC5F,MAAM,CAAC,CACH,oBAAC,qBAAS,IACN,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB;YACI,oBAAC,uBAAU,IACP,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,WAAW,EAAE,KAAK,CAAC,WAAW,EAC9B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,YAAY,EAAE,KAAK,CAAC,YAAY,EAChC,YAAY,EAAE,KAAK,CAAC,YAAY,EAChC,WAAW,EAAE,KAAK,CAAC,WAAW,EAC9B,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,EACpB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,KAAK,CAAC,IAAI,GAClB,CACA,CACE,CACf,CAAC;AACN,CAAC,CAAC;AAEF,kBAAU,CAAC,YAAY,GAAG;IACtB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE;QACF,cAAc,EAAE,EAAE;QAClB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;QACb,OAAO,EAAE,EAAE;QACX,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,EAAE;QACf,OAAO,EAAE,EAAE;QACX,QAAQ,EAAE,EAAE;QACZ,MAAM,EAAE,EAAE;KACb;CACJ,CAAC;AAEF,kBAAe,kBAAU,CAAC","file":"ComboField.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {OptionAttr, ButtonProps} from '../../Attributes';\r\nimport {MethodNode, FormOption} from '../../Common';\r\nimport {ComboInput, ComboInputAttributes} from '../Input/ComboInput';\r\nimport {FormField, FormFieldAttributes} from './FormField';\r\nconst css = classNames.bind(require('./Field.scss'));\r\n\r\nexport interface ComboFieldType {}\r\n\r\nexport interface ComboFieldProps extends React.Props<ComboFieldType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** Current value of HTML input element */\r\n    value: string | any;\r\n    /** HTML input element placeholder */\r\n    placeholder?: string;\r\n\r\n    /** \r\n     * List of HTML select element options in the format:\r\n     * \r\n     * `{\r\n     *     label: string,\r\n     *     value: any,\r\n     *     disabled: boolean,\r\n     *     hidden: boolean\r\n     * }`\r\n     */\r\n    options: (FormOption & OptionAttr<ButtonProps>)[];\r\n\r\n    /**\r\n     * Callback used to map FormOption to strings to be used by default \r\n     * optionFilter and optionSelect callbacks\r\n     * \r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionMap?: (option: FormOption) => string;\r\n    /**\r\n     * Callback used to filter list of FormOptions for display in the dropdown\r\n     * \r\n     * This function can, for example, implement autocomplete by hiding\r\n     * any option that does not contain the value in the text input\r\n     * \r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionFilter?: (newValue: string, option: FormOption) => boolean;\r\n    /**\r\n     * Callback used to decide whether a FormOption is selected or not\r\n     * \r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionSelect?: (newValue: string, option: FormOption) => boolean;\r\n    /**\r\n     * Callback used to generate a React node to use as the label in dropdown\r\n     * \r\n     * This function can, for example, bold any relevant fragments of text for\r\n     * highlighting in autocomplete\r\n     * \r\n     * See examples for how to use these callbacks\r\n     */\r\n    optionLabel?: (newValue: string, option: FormOption) => MethodNode;\r\n\r\n    /** Label to display above input element */\r\n    label: MethodNode;\r\n    /** Error to display below input element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n\r\n    /** Disable HTML input element */\r\n    disabled?: boolean;\r\n    /** Read only HTML input element */\r\n    readOnly?: boolean;\r\n    /** Form field is required (appends a red asterisk to the label) */\r\n    required?: boolean;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n    /**\r\n     * Show label instead of FormOption value in ComboInput text box when a \r\n     * value from the FormOptions is selected\r\n     * \r\n     * Since the ComboInput has a text input, it cannot draw an arbitrary \r\n     * MethodNode as the textbox value. If props.optionLabel returns a string,\r\n     * then you can show the label text in the textbox instead of the option\r\n     * value itself.\r\n     * \r\n     * Note: If the label and value are different and showLabel is true,\r\n     * when the user starts typing after making a selection in the dropdown,\r\n     * it will not reselect the option unless optionSelect checks the label\r\n     * string as well as the value.\r\n     * \r\n     * For example:\r\n     * ```js\r\n     * optionSelect = (newValue, option) => {\r\n     *     return newValue === option.value || newValue === option.label.toString();\r\n     * }\r\n     * ```\r\n     * \r\n     * Default: true\r\n     */\r\n    showLabel?: boolean;\r\n\r\n    /** Callback for HTML input element `onChange` events */\r\n    onChange: (newValue: string | FormOption) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level element of ComboInput */\r\n    inputClassName?: string;\r\n\r\n    attr?: ComboInputAttributes & FormFieldAttributes;\r\n}\r\n\r\n/**\r\n * High level form select box control\r\n * \r\n * `ComboField` is a hybrid of the SelectField and TextField controls. It\r\n * functions as a 'new or existing' text field where the user can type in a\r\n * custom value or pick from a list of values provided by the control.\r\n * \r\n * `ComboField` consumes the property `options: FormOption[]` which specify each\r\n * option's `value` and `label`. The former can be any object while the latter\r\n * can be any React node (or a string). `ComboField` also consumes a\r\n * `value: string | FormOption` property that sets the current value of the\r\n * `ComboField` text field. If `value` is a `string`, the user is typing in a\r\n * custom value and if it is an object, the user has either typed in a value\r\n * equal to one of the options or has selected an option from the dropdown list.\r\n * \r\n * In this example of a default `ComboField`, `FormOption.value` must be a string,\r\n *  which allows you to use `ComboField` with only the properties `name`, `value`,\r\n * `onChange`, and `options`. When the user types in 'Option 1', that option will\r\n * be considered selected instead of a custom object.\r\n * \r\n * *Reffer to the other examples on how to use `ComboField`'s callbacks to further\r\n * modify what options display in the dropdown.*\r\n * \r\n * IMPORTANT: The options provided to this control must all be UNIQUE. The\r\n * `value` property of radio buttons is the numerical index of the option in\r\n * `ComboField.options` so `ComboField.value` is compared to each value in\r\n * `options` (===) to decide which option is the one currently selected.\r\n * \r\n * @param props: Object fulfilling `ComboFieldProps` interface\r\n */\r\nexport const ComboField: React.StatelessComponent<ComboFieldProps> = (props: ComboFieldProps) => {\r\n    return (\r\n        <FormField\r\n            name={props.name}\r\n            label={props.label}\r\n            error={props.error}\r\n            errorTitle={props.errorTitle}\r\n            loading={props.loading}\r\n            required={props.required}\r\n            className={props.className}\r\n            attr={props.attr}\r\n        >\r\n            <div>\r\n                <ComboInput\r\n                    name={props.name}\r\n                    value={props.value}\r\n                    placeholder={props.placeholder}\r\n                    options={props.options}\r\n                    optionMap={props.optionMap}\r\n                    optionFilter={props.optionFilter}\r\n                    optionSelect={props.optionSelect}\r\n                    optionLabel={props.optionLabel}\r\n                    error={!!props.error}\r\n                    disabled={props.disabled}\r\n                    readOnly={props.readOnly}\r\n                    onChange={props.onChange}\r\n                    className={props.inputClassName}\r\n                    autoFocus={props.autoFocus}\r\n                    showLabel={props.showLabel}\r\n                    required={props.required}\r\n                    attr={props.attr}\r\n                />\r\n            </div>\r\n        </FormField>\r\n    );\r\n};\r\n\r\nComboField.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    label: undefined,\r\n    onChange: undefined,\r\n    options: undefined,\r\n    attr: {\r\n        fieldContainer: {},\r\n        fieldLabel: {},\r\n        fieldContent: {},\r\n        fieldError: {},\r\n        container: {},\r\n        textbox: {},\r\n        input: {},\r\n        clearButton: {},\r\n        chevron: {},\r\n        dropdown: {},\r\n        option: {},\r\n    }\r\n};\r\n\r\nexport default ComboField;\r\n"]}