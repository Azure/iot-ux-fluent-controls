{"version":3,"sources":["src/method/components/Field/RadioField.tsx"],"names":[],"mappings":";;AAAA,+BAA+B;AAC/B,8CAA8C;AAC9C,iDAAmE;AAEnE,oDAAqE;AACrE,2CAA2D;AAC3D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AAoDrD;;;;;;;;;GASG;AACU,QAAA,UAAU,GAA8C,CAAC,KAAsB,EAAE,EAAE;IAC5F,MAAM,QAAQ,GAAG,CAAC,QAAQ,EAAE,EAAE;QAC1B,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAC;IAEF,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QAChD,MAAM,CAAC,CACH,oBAAC,uBAAU,IACP,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,GAAG,KAAK,EAAE,EACjB,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,OAAO,EAAE,KAAK,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,EACrC,QAAQ,EAAE,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,EAC3C,MAAM,EAAE,MAAM,CAAC,MAAM,EACrB,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,GAAG,EAAE,GAAG,KAAK,CAAC,IAAI,IAAI,KAAK,EAAE,EAC7B,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,IAAI,EAAE,kCAAqB,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE;gBACjD,WAAW;gBACX,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,MAAM;gBACN,MAAM;gBACN,QAAQ;aACX,CAAC,GACJ,CACL,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,CACH,oBAAC,qBAAS,IACN,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,EAC5B,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,SAAS,EAAE,KAAK,CAAC,SAAS,EAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;QAEhB,iCACK,OAAO,CACN,CACE,CACf,CAAC;AACN,CAAC,CAAC;AAEF,kBAAU,CAAC,YAAY,GAAG;IACtB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE;QACF,cAAc,EAAE,EAAE;QAClB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,EAAE;QACT,KAAK,EAAE,EAAE;QACT,KAAK,EAAE,EAAE;QACT,IAAI,EAAE,EAAE;QACR,IAAI,EAAE,EAAE;QACR,MAAM,EAAE,EAAE;KACb;CACJ,CAAC;AAEF,kBAAe,kBAAU,CAAC","file":"RadioField.js","sourcesContent":["import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {OptionAttr, mergeAttributeObjects} from '../../Attributes';\r\nimport {MethodNode, FormOption} from '../../Common';\r\nimport {RadioInput, RadioInputAttributes} from '../Input/RadioInput';\r\nimport {FormField, FormFieldAttributes} from './FormField';\r\nconst css = classNames.bind(require('./Field.scss'));\r\n\r\nexport interface RadioFieldType {}\r\n\r\nexport interface RadioFieldProps extends React.Props<RadioFieldType> {\r\n    /** HTML form element name */\r\n    name: string;\r\n    /** \r\n     * Current value of HTML radio button element\r\n     * \r\n     * This must be an `Object` that is in `RadioFieldProps.options`\r\n     */\r\n    value: any;\r\n    /** \r\n     * List of HTML radio button element options in the format:\r\n     * \r\n     * `{\r\n     *     label: string,\r\n     *     value: any\r\n     * }`\r\n     */\r\n    options: (FormOption & OptionAttr<RadioInputAttributes>)[];\r\n    \r\n    /** Label to display above input element */\r\n    label: MethodNode;\r\n    /** Error to display below input element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n    \r\n    /** Allow radio buttons to show up in columns */\r\n    columns?: boolean;\r\n    /** Disable HTML input element */\r\n    disabled?: boolean;\r\n    /** Form field is required (appends a red asterisk to the label) */\r\n    required?: boolean;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Autofocus */\r\n    autoFocus?: boolean;\r\n\r\n    /** Callback for HTML radio button element `onChange` events */\r\n    onChange: (newValue: any) => void;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level element of RadioInput */\r\n    inputClassName?: string;\r\n\r\n    attr?: RadioInputAttributes & FormFieldAttributes;\r\n}\r\n\r\n/**\r\n * High level form select box control\r\n * \r\n * IMPORTANT: The options provided to this control must all be UNIQUE. The\r\n * `value` property of radio buttons is the numerical index of the option in\r\n * `RadioField.options` so `RadioField.value` is compared to each value in\r\n * `options` (===) to decide which option is the one currently selected.\r\n * \r\n * @param props: Object fulfilling `RadioFieldProps` interface\r\n */\r\nexport const RadioField: React.StatelessComponent<RadioFieldProps> = (props: RadioFieldProps) => {\r\n    const onChange = (newValue) => {\r\n        const index = parseInt(newValue);\r\n        props.onChange(props.options[index].value);\r\n    };\r\n    \r\n    const options = props.options.map((option, index) => {\r\n        return (\r\n            <RadioInput\r\n                name={props.name}\r\n                value={`${index}`}\r\n                label={option.label}\r\n                columns={props.columns}\r\n                checked={props.value === option.value}\r\n                disabled={props.disabled || option.disabled}\r\n                hidden={option.hidden}\r\n                onChange={onChange}\r\n                className={props.inputClassName}\r\n                key={`${props.name}-${index}`}\r\n                autoFocus={props.autoFocus}\r\n                required={props.required}\r\n                attr={mergeAttributeObjects(props.attr, option.attr, [\r\n                    'container',\r\n                    'label',\r\n                    'input',\r\n                    'radio',\r\n                    'text',\r\n                    'fill',\r\n                    'border',\r\n                ])}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <FormField\r\n            name={props.name}\r\n            label={props.label}\r\n            error={props.error}\r\n            errorTitle={props.errorTitle}\r\n            loading={props.loading}\r\n            required={props.required}\r\n            className={props.className}\r\n            attr={props.attr}\r\n        >\r\n            <div>\r\n                {options}\r\n            </div>\r\n        </FormField>\r\n    );\r\n};\r\n\r\nRadioField.defaultProps = {\r\n    name: undefined,\r\n    value: undefined,\r\n    label: undefined,\r\n    onChange: undefined,\r\n    options: undefined,\r\n    attr: {\r\n        fieldContainer: {},\r\n        fieldLabel: {},\r\n        fieldContent: {},\r\n        fieldError: {},\r\n        container: {},\r\n        label: {},\r\n        input: {},\r\n        radio: {},\r\n        text: {},\r\n        fill: {},\r\n        border: {},\r\n    }\r\n};\r\n\r\nexport default RadioField;\r\n"]}