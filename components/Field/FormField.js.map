{"version":3,"sources":["src/method/components/Field/FormField.tsx"],"names":[],"mappings":";;AAAC,+BAA+B;AAChC,8CAA8C;AAC9C,iDAAwE;AAExE,sCAA2C;AAC3C,2CAA2D;AAC3D,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;AAmCrD;;;;GAIG;AACU,QAAA,SAAS,GAA6C,CAAC,KAAqB,EAAE,EAAE;IACzF,MAAM,cAAc,GAAG,GAAG,CAAC,iBAAiB,EAAE;QAC1C,aAAa,EAAE,KAAK,CAAC,KAAK;QAC1B,UAAU,EAAE,KAAK,CAAC,QAAQ,IAAI,OAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,QAAQ;KACjE,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IAEpB,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IACxB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAChB,KAAK,GAAG,oBAAC,yBAAgB,IAAC,IAAI,EAAE,CAAC,GAAI,CAAC;IAC1C,CAAC;IAED,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;QACvB,oBAAC,qBAAI,CAAC,KAAK,IACP,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,EACvB,OAAO,EAAE,KAAK,CAAC,IAAI,EACnB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,IAE1B,KAAK,CAAC,KAAK,CACH,CAAC,CAAC,CAAC,EAAE,CAAC;IAEvB,MAAM,CAAC,CACH,oBAAC,qBAAI,CAAC,GAAG,IAAC,SAAS,EAAE,cAAc,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,cAAc;QAC/D,KAAK;QACN,oBAAC,qBAAI,CAAC,GAAG,IAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,YAAY,IAC7D,KAAK,CAAC,QAAQ,CACR;QACX,oBAAC,qBAAS,IACN,SAAS,EAAE,KAAK,CAAC,cAAc,EAC/B,MAAM,EAAE,KAAK,CAAC,SAAS,EACvB,KAAK,EAAE,KAAK,CAAC,UAAU,EACvB,IAAI,EAAE,EAAC,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,EAAC,IAEvC,KAAK,CACE,CACL,CACd,CAAC;AACN,CAAC,CAAC;AAEF,iBAAS,CAAC,YAAY,GAAG;IACrB,IAAI,EAAE,SAAS;IACf,KAAK,EAAE,SAAS;IAChB,OAAO,EAAE,KAAK;IACd,SAAS,EAAE,KAAK;IAChB,IAAI,EAAE;QACF,cAAc,EAAE,EAAE;QAClB,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,UAAU,EAAE,EAAE;KACjB;CACJ,CAAC;AAEF,kBAAe,iBAAS,CAAC","file":"FormField.js","sourcesContent":[" import * as React from 'react';\r\nimport * as classNames from 'classnames/bind';\r\nimport {DivProps, LabelProps, Elements as Attr} from '../../Attributes';\r\nimport {MethodNode} from '../../Common';\r\nimport {HorizontalLoader} from '../Loader';\r\nimport {FormError, FormErrorAttributes} from './FormError';\r\nconst css = classNames.bind(require('./Field.scss'));\r\n\r\nexport interface FormFieldType {}\r\n\r\nexport interface FormFieldAttributes {\r\n    fieldContainer?: DivProps;\r\n    fieldLabel?: LabelProps;\r\n    fieldContent?: DivProps;\r\n    fieldError?: DivProps;\r\n}\r\n\r\nexport interface FormFieldProps extends React.Props<FormFieldType> {\r\n    /** HTML element name for label accessibility */\r\n    name: string;\r\n    /** Label to display above input element */\r\n    label?: MethodNode;\r\n    /** Error to display below input element */\r\n    error?: MethodNode;\r\n    /** Error HTML title in case of overflow */\r\n    errorTitle?: string;\r\n    /** Display horizontal loading animation instead of error */\r\n    loading?: boolean;\r\n    /** Appends a red asterisk to the label if it is a string */\r\n    required?: boolean;\r\n    /** Set error field to display: none */\r\n    hideError?: boolean;\r\n\r\n    /** Classname to append to top level element */\r\n    className?: string;\r\n    /** Classname to append to top level error element */\r\n    errorClassName?: string;\r\n\r\n    attr?: FormFieldAttributes;\r\n}\r\n\r\n/**\r\n * High level generic form field\r\n * \r\n * @param props Control properties (defined in `FormFieldProps` interface)\r\n */\r\nexport const FormField: React.StatelessComponent<FormFieldProps> = (props: FormFieldProps) => {\r\n    const containerClass = css('input-container', {\r\n        'input-error': props.error,\r\n        'required': props.required && typeof(props.label) === 'string',        \r\n    }, props.className);\r\n\r\n    let error = props.error;\r\n    if (props.loading) {\r\n        error = <HorizontalLoader dots={6} />;\r\n    }\r\n\r\n    const label = props.label ? \r\n        <Attr.label\r\n            className={css('label')}\r\n            htmlFor={props.name} \r\n            attr={props.attr.fieldLabel}\r\n        >\r\n            {props.label}\r\n        </Attr.label> : '';\r\n\r\n    return (\r\n        <Attr.div className={containerClass} attr={props.attr.fieldContainer}>\r\n            {label}\r\n            <Attr.div className={css('content')} attr={props.attr.fieldContent}>\r\n                {props.children}\r\n            </Attr.div>\r\n            <FormError\r\n                className={props.errorClassName}\r\n                hidden={props.hideError}\r\n                title={props.errorTitle}\r\n                attr={{container: props.attr.fieldError}}\r\n            >\r\n                {error}\r\n            </FormError>\r\n        </Attr.div>\r\n    );\r\n};\r\n\r\nFormField.defaultProps = {\r\n    name: undefined,\r\n    label: undefined,\r\n    loading: false,\r\n    hideError: false,\r\n    attr: {\r\n        fieldContainer: {},\r\n        fieldLabel: {},\r\n        fieldContent: {},\r\n        fieldError: {},\r\n    }\r\n};\r\n\r\nexport default FormField;\r\n"]}